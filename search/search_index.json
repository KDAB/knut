{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Knut","text":"<p>Knut is an automation tool for code transformation using scripts. The main use case is for migration, but it could be used elsewhere.</p> <p>The scripts are written either in javascript or QML languages, the latter being able to display a user interface to customize some parts of the application. The script API is available in this documentation, and ranges from normal text transformations (find and replace) to getting contextual information based on the file language (using TreeSitter.</p> <p>Knut can be used via a command line interface or a user interface.</p>"},{"location":"index.html#licensing","title":"Licensing","text":"<p>Knut is \u00a9 Klar\u00e4lvdalens Datakonsult AB (KDAB) and is licensed according to the terms of GPL 3.0.</p> <p>Contact KDAB at info@kdab.com to inquire about licensing options.</p>"},{"location":"index.html#about-kdab","title":"About KDAB","text":"<p>Knut is written and maintained by Klar\u00e4lvdalens Datakonsult AB (KDAB).</p> <p>The KDAB Group is the global No.1 software consultancy for Qt, C++ and OpenGL applications across desktop, embedded and mobile platforms.</p> <p>The KDAB Group provides consulting and mentoring for developing Qt applications from scratch and in porting from all popular and legacy frameworks to Qt. We continue to help develop parts of Qt and are one of the major contributors to the Qt Project. We can give advanced or standard training anywhere around the globe on Qt as well as C++, OpenGL, 3D and more.</p> <p>Please visit https://www.kdab.com to meet the people who write code like this.</p> <p>Stay up-to-date with KDAB product announcements:</p> <ul> <li>KDAB Newsletter</li> <li>KDAB Blogs</li> <li>KDAB on Twitter</li> <li>KDAB on YouTube</li> </ul>"},{"location":"API/script/action.html","title":"Action","text":"<p>Description of a RC file action. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/action.html#properties","title":"Properties","text":"Name bool checked string iconPath string id array&lt;Shortcut&gt; shortcuts string statusTip string toolTip"},{"location":"API/script/action.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/action.html#bool-checked","title":"bool checked","text":"<p>This property is <code>true</code> if the action is checkabled and checked by default.</p>"},{"location":"API/script/action.html#string-iconpath","title":"string iconPath","text":"<p>This property holds the fileName for the icon of the action.</p>"},{"location":"API/script/action.html#string-id","title":"string id","text":"<p>This property holds the id of the action.</p>"},{"location":"API/script/action.html#arrayshortcut-shortcuts","title":"array&lt;Shortcut&gt; shortcuts","text":"<p>This property holds all the shortcuts associated with the action.</p>"},{"location":"API/script/action.html#string-statustip","title":"string statusTip","text":"<p>This property holds the statusTip of the action.</p>"},{"location":"API/script/action.html#string-tooltip","title":"string toolTip","text":"<p>This property holds the toolTip of the action.</p>"},{"location":"API/script/asset.html","title":"Asset","text":"<p>Description of a RC file asset. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/asset.html#properties","title":"Properties","text":"Name bool exist string fileName string id"},{"location":"API/script/asset.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/asset.html#bool-exist","title":"bool exist","text":"<p>This property returns <code>true</code> if the asset's file exists.</p>"},{"location":"API/script/asset.html#string-filename","title":"string fileName","text":"<p>This property holds the fileName of the asset. The fileName is absolute if the asset's file exists.</p>"},{"location":"API/script/asset.html#string-id","title":"string id","text":"<p>This property holds the id of the asset.</p>"},{"location":"API/script/classsymbol.html","title":"ClassSymbol","text":"<p>Experimental API</p> <p>The API here is still experimental, and may change in follow-up release. Use it at your own risk.</p> <p>Represents a class in the current file More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/classsymbol.html#properties","title":"Properties","text":"Name vector&lt;Symbol&gt; members"},{"location":"API/script/classsymbol.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/classsymbol.html#vectorsymbol-members","title":"vector&lt;Symbol&gt; members","text":"<p>Returns the list of members (both data and functions) of this class.</p>"},{"location":"API/script/codedocument.html","title":"CodeDocument","text":"<p>Base document object for any code that Knut can parse. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/codedocument.html#properties","title":"Properties","text":"<p>Inherited properties: TextDocument properties</p>"},{"location":"API/script/codedocument.html#methods","title":"Methods","text":"Name Symbol findSymbol(string name, int options = TextDocument.NoFindFlags) string hover() array&lt;QueryMatch&gt; query(string query) QueryMatch queryFirst(string query) array&lt;QueryMatch&gt; queryInRange(RangeMark range, string query) selectSymbol(string name, int options = TextDocument.NoFindFlags) Symbol symbolUnderCursor() array&lt;Symbol&gt; symbols() <p>Inherited methods: TextDocument methods</p>"},{"location":"API/script/codedocument.html#detailed-description","title":"Detailed Description","text":"<p>Knut uses Tree-sitter to parse the code and provide additional information about it. For a better user experience, the Knut GUI also uses a Language server (LSP), if available. For each language that Knut can work with, this class should be subclassed to provide language-specific functionality.</p> <p>This class provides the language-independent basis of integration with Tree-sitter and the LSP.</p>"},{"location":"API/script/codedocument.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/codedocument.html#symbol-findsymbolstring-name-int-options-textdocumentnofindflags","title":"Symbol findSymbol(string name, int options = TextDocument.NoFindFlags)","text":"<p>Finds a symbol based on its <code>name</code>, using different find <code>options</code>.</p> <ul> <li><code>TextDocument.FindCaseSensitively</code>: match case</li> <li><code>TextDocument.FindWholeWords</code>: match only fully qualified symbol</li> <li><code>TextDocument.FindRegexp</code>: use a regexp</li> </ul> <p>Note that the returned <code>Symbol</code> pointer is only valid until the document it originates from is deconstructed.</p>"},{"location":"API/script/codedocument.html#string-hover","title":"string hover()","text":"<p>Returns information about the symbol at the current cursor position. The result of this call is a plain string that may be formatted in Markdown.</p>"},{"location":"API/script/codedocument.html#arrayquerymatch-querystring-query","title":"array&lt;QueryMatch&gt; query(string query)","text":"<p>Runs the given Tree-sitter <code>query</code> and returns the list of matches.</p> <p>The query is using Tree-sitter queries.</p> <p>Also see: Tree-sitter in Knut</p>"},{"location":"API/script/codedocument.html#querymatch-queryfirststring-query","title":"QueryMatch queryFirst(string query)","text":"<p>Runs the given Tree-sitter <code>query</code> and returns the first match. If no match can be found an empty match will be returned.</p> <p>This can be a lot faster than <code>query</code> if you only need the first match.</p> <p>The query is using Tree-sitter queries.</p> <p>Also see: Tree-sitter in Knut  Core::QueryMatchList CodeDocument::query(const QString &amp;query)</p>"},{"location":"API/script/codedocument.html#arrayquerymatch-queryinrangerangemark-range-string-query","title":"array&lt;QueryMatch&gt; queryInRange(RangeMark range, string query)","text":"<p>Searches for the given <code>query</code>, but only in the provided <code>range</code>.</p>"},{"location":"API/script/codedocument.html#selectsymbolstring-name-int-options-textdocumentnofindflags","title":"selectSymbol(string name, int options = TextDocument.NoFindFlags)","text":"<p>Selects a symbol based on its <code>name</code>, using different find <code>options</code>.</p> <ul> <li><code>TextDocument.FindCaseSensitively</code>: match case</li> <li><code>TextDocument.FindWholeWords</code>: match only fully qualified symbol</li> <li><code>TextDocument.FindRegexp</code>: use a regexp</li> </ul> <p>If no symbols are found, do nothing.</p>"},{"location":"API/script/codedocument.html#symbol-symbolundercursor","title":"Symbol symbolUnderCursor()","text":"<p>Returns the symbol that's at the current cursor position.</p> <p>This function may return symbols that are not returned by the <code>symbols()</code> or <code>currentSymbol()</code> function, as these only return high-level symbols, like classes and functions, but not symbols within functions. <code>symbolUnderCursor()</code> can however return these Symbols.</p>"},{"location":"API/script/codedocument.html#arraysymbol-symbols","title":"array&lt;Symbol&gt; symbols()","text":"<p>Returns the list of symbols in the current document.</p> <p>Note that the returned <code>Symbol</code> pointers are only valid until the document they originate from is deconstructed.</p>"},{"location":"API/script/cppdocument.html","title":"CppDocument","text":"<p>Document object for a C++ file (source or header) More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/cppdocument.html#properties","title":"Properties","text":"Name bool isHeader <p>Inherited properties: CodeDocument properties</p>"},{"location":"API/script/cppdocument.html#methods","title":"Methods","text":"Name addMember(string member, string className, AccessSpecifier) addMethod(string declaration, string className, AccessSpecifier, string body) addMethod(string declaration, string className, AccessSpecifier) addMethodDeclaration(string method, string className, AccessSpecifier specifier) addMethodDefinition(string method, string className) addMethodDefinition(string method, string className, string body) void changeBaseClass() commentSelection() string correspondingHeaderSource() void deleteMethod() void deleteMethod(string methodName) void deleteMethod(string method, string signature) int gotoBlockEnd(int count) int gotoBlockStart(int count) insertCodeInMethod(string methodName, string code, Position insertAt) insertForwardDeclaration(string forwardDeclaration) insertInclude(string include, bool newGroup = false) QStringList keywords() DataExchange mfcExtractDDX(string className) MessageMap mfcExtractMessageMap(string className = \"\") CppDocument openHeaderSource() QStringList primitiveTypes() QueryMatch queryClassDefinition(string className) array&lt;QueryMatch&gt; queryFunctionCall(string functionName) array&lt;QueryMatch&gt; queryFunctionCall(string functionName, array&lt;string&gt; argumentCaptures) QueryMatch queryMember(string className, string memberName) array&lt;QueryMatch&gt; queryMethodDeclaration(string className, string functionName) array&lt;QueryMatch&gt; queryMethodDefinition(string scope, string methodName) removeInclude(string include) int selectBlockEnd() int selectBlockStart() int selectBlockUp() toggleSection() <p>Inherited methods: CodeDocument methods</p>"},{"location":"API/script/cppdocument.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/cppdocument.html#bool-isheader","title":"bool isHeader","text":"<p>Return true if the current document is a header.</p>"},{"location":"API/script/cppdocument.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/cppdocument.html#addmemberstring-member-string-classname-accessspecifier","title":"addMember(string member, string className, AccessSpecifier)","text":"<p>Adds a new member in a specific class under the specific access specifier.</p> <p>If the class does not exist, log error can't find the class, but if the specifier is valid but does not exist in the class, we will add that specifier in the end of the class and add the member under it. The specifier can take these values:</p> <ul> <li><code>CppDocument.Public</code></li> <li><code>CppDocument.Protected</code></li> <li><code>CppDocument.Private</code></li> </ul>"},{"location":"API/script/cppdocument.html#addmethodstring-declaration-string-classname-accessspecifier-string-bodyaddmethodstring-declaration-string-classname-accessspecifier","title":"addMethod(string declaration, string className, AccessSpecifier, string body)addMethod(string declaration, string className, AccessSpecifier)","text":"<p>Declares and defines a new method. This method can be called on either the header or source file. It will find the corresponding header/source file and add the declaration to the header and the definition to the source.</p>"},{"location":"API/script/cppdocument.html#addmethoddeclarationstring-method-string-classname-accessspecifier-specifier","title":"addMethodDeclaration(string method, string className, AccessSpecifier specifier)","text":"<p>Declares a new method in a specific class under the specific access specifier.</p> <p>If the class does not exist, log error can't find the class, but if the specifier is valid but does not exist in the class, we will add that specifier in the end of the class and declare the method under it. The specifier can take these values:</p> <ul> <li><code>CppDocument.Public</code></li> <li><code>CppDocument.Protected</code></li> <li><code>CppDocument.Private</code></li> </ul>"},{"location":"API/script/cppdocument.html#addmethoddefinitionstring-method-string-classnameaddmethoddefinitionstring-method-string-classname-string-body","title":"addMethodDefinition(string method, string className)addMethodDefinition(string method, string className, string body)","text":"<p>Adds a new method definition for the method declared by the given <code>method</code> for class <code>className</code> in the current file. The provided <code>body</code> should not include the curly braces.</p> <p>If no body is provided, it will default to an empty body.</p>"},{"location":"API/script/cppdocument.html#void-changebaseclass","title":"void changeBaseClass()","text":"<p>Convert Class Base</p> <p>Also see: CppDocument::changeBaseClass(const QString &amp;className, const QString &amp;originalClassBaseName, const QString &amp;newClassBaseName)</p>"},{"location":"API/script/cppdocument.html#commentselection","title":"commentSelection()","text":"<p>Comments the selected lines (or current line if there's no selection) in current document.</p> <ul> <li>If there's no selection, current line is commented using <code>//</code>.</li> <li>If there's a valid selection and the start and end position of the selection are before any text of the lines,   all of the selected lines are commented using <code>//</code>.</li> <li>If there's a valid selection and the start and/or end position of the selection are between any text of the   lines, all of the selected lines are commented using multi-line comment.</li> <li>If selection or position is invalid or out of range, or the position is on an empty line, the document remains   unchanged.</li> </ul>"},{"location":"API/script/cppdocument.html#string-correspondingheadersource","title":"string correspondingHeaderSource()","text":"<p>Returns the corresponding source or header file path.</p>"},{"location":"API/script/cppdocument.html#void-deletemethod","title":"void deleteMethod()","text":"<p>Deletes the method/function at the current cursor position. Overloads of the function will not be deleted!</p> <p>Also see: CppDocument::deleteMethod(const QString&amp; methodName, const QString&amp; signature)</p>"},{"location":"API/script/cppdocument.html#void-deletemethodstring-methodname","title":"void deleteMethod(string methodName)","text":"<p>Deletes a method of the specified <code>methodName</code>, without matching a specific <code>signature</code>. Therefore, all overloads of the function will be deleted.</p> <p>Also see: CppDocument::deleteMethod(string methodName, string signature)</p>"},{"location":"API/script/cppdocument.html#void-deletemethodstring-method-string-signature","title":"void deleteMethod(string method, string signature)","text":"<p>Delete the method or function with the specified <code>method</code> and optional <code>signature</code>. The method definition/declaration will be deleted from the current file, as well as the corresponding header/source file. References to the method will not be deleted.</p> <p>The <code>method</code> must be fully qualified, i.e. \"::::\". <p>The <code>signature</code> must be in the form: \" (, , &lt;...&gt;)\". i.e. for a function with the following declaration: <pre><code>void myFunction(const QString&amp; a, int b);\n</code></pre> <p>The <code>signature</code> would be:</p> <pre><code>void (const QString&amp;, int)\n</code></pre> <p>If an empty string is provided as the <code>signature</code>, all overloads of the function are deleted as well.</p>"},{"location":"API/script/cppdocument.html#int-gotoblockendint-count","title":"int gotoBlockEnd(int count)","text":"<p>Moves the cursor to the end of the block it's in, and returns the new cursor position. A block is defined by {} or () or []. Does it <code>count</code> times.</p>"},{"location":"API/script/cppdocument.html#int-gotoblockstartint-count","title":"int gotoBlockStart(int count)","text":"<p>Moves the cursor to the start of the block it's in, and returns the new cursor position. A block is defined by {} or () or []. Does it <code>count</code> times.</p>"},{"location":"API/script/cppdocument.html#insertcodeinmethodstring-methodname-string-code-position-insertat","title":"insertCodeInMethod(string methodName, string code, Position insertAt)","text":"<p>Provides a fast way to add some code in an existing method definition. Does nothing if the method does not exist in the current document.</p> <p>This method will find a method in the current file with name matching with <code>methodName</code>. If the method exists in the current document, then it will insert the supplied <code>code</code> either at the beginning of the method, or at the end of the method, depending on the <code>insertAt</code> argument.</p>"},{"location":"API/script/cppdocument.html#insertforwarddeclarationstring-forwarddeclaration","title":"insertForwardDeclaration(string forwardDeclaration)","text":"<p>Inserts the forward declaration <code>forwardDeclaration</code> into the current file. The method will check if the file is a header file, and also that the forward declaration starts with 'class ' or 'struct '. Fully qualified the forward declaration to add namespaces: <code>class Foo::Bar::FooBar</code> will result in:</p> <pre><code>namespace Foo {\nnamespace Bar {\nclass FooBar\n}\n}\n</code></pre>"},{"location":"API/script/cppdocument.html#insertincludestring-include-bool-newgroup-false","title":"insertInclude(string include, bool newGroup = false)","text":"<p>Inserts a new include line in the file. If the include is already in, do nothing (and returns true).</p> <p>The <code>include</code> string should be either <code>&lt;foo.h&gt;</code> or <code>\"foo.h\"</code>, it will returns false otherwise. The method will try to find the best group of includes to insert into, a group of includes being consecutive includes in the file.</p> <p>If <code>newGroup</code> is true, it will insert the include at the end, with a new line separating the other includes.</p>"},{"location":"API/script/cppdocument.html#qstringlist-keywords","title":"QStringList keywords()","text":"<p>Returns a list of cpp keywords</p> <p>See: Utils::cppKeywords()</p>"},{"location":"API/script/cppdocument.html#dataexchange-mfcextractddxstring-classname","title":"DataExchange mfcExtractDDX(string className)","text":"<p>Extracts the DDX information from a MFC class.</p> <p>The DDX information gives the mapping between the IDC and the member variables in the class.</p>"},{"location":"API/script/cppdocument.html#messagemap-mfcextractmessagemapstring-classname","title":"MessageMap mfcExtractMessageMap(string className = \"\")","text":"<p>Extracts information contained in the MFC MESSAGE_MAP. The <code>className</code> parameter can be used to ensure the result matches to a specific class.</p>"},{"location":"API/script/cppdocument.html#cppdocument-openheadersource","title":"CppDocument openHeaderSource()","text":"<p>Opens the corresponding source or header files, the current document is the new file. If no files have been found, it's a no-op.</p>"},{"location":"API/script/cppdocument.html#qstringlist-primitivetypes","title":"QStringList primitiveTypes()","text":"<p>Returns a list of cpp primitive types</p> <p>See Utils::cppPrimitiveTypes()</p>"},{"location":"API/script/cppdocument.html#querymatch-queryclassdefinitionstring-classname","title":"QueryMatch queryClassDefinition(string className)","text":"<p>Returns the class or struct definition matching the given <code>className</code>.</p> <p>The returned QueryMatch instance will have the following captures available:</p> <ul> <li><code>name</code> - The name of the class or struct</li> <li><code>base</code> - The list of base classes/structs, if any</li> <li><code>body</code> - The body of the class or struct definition (including curly-braces)</li> </ul>"},{"location":"API/script/cppdocument.html#arrayquerymatch-queryfunctioncallstring-functionname","title":"array&lt;QueryMatch&gt; queryFunctionCall(string functionName)","text":"<p>Returns the list of function calls to the function <code>functionName</code>, no matter how many arguments they were called with.</p> <p>The returned QueryMatch instances will have the following captures available:</p> <ul> <li><code>call</code> - The entire call expression</li> <li><code>name</code> - The name of the function (the text will be equal to functionName)</li> <li><code>argument-list</code> - The entire list of arguments, including the surroundg parentheses <code>()</code></li> <li><code>arguments</code> - Each argument provided to the function call, in order, excluding any comments</li> </ul>"},{"location":"API/script/cppdocument.html#arrayquerymatch-queryfunctioncallstring-functionname-arraystring-argumentcaptures","title":"array&lt;QueryMatch&gt; queryFunctionCall(string functionName, array&lt;string&gt; argumentCaptures)","text":"<p>Returns the list of function calls to the function <code>functionName</code>. Only calls that have the same number of arguments as <code>argumentCaptures</code> will be returned.</p> <p>The <code>argumentCaptures</code> list is a list of names that will be used to capture the arguments of the function call. E.g. <code>queryFunctionCall(\"foo\", [\"first\", \"second\"])</code> will return a list of calls to <code>foo</code> with two arguments, where the first argument will be captured in the <code>first</code> capture, and the second in the <code>second</code> capture.</p> <p>The returned QueryMatch instances will have the following captures available:</p> <ul> <li><code>call</code> - The entire call expression</li> <li><code>name</code> - The name of the function (the text will be equal to functionName)</li> <li><code>argument-list</code> - The entire list of arguments, including the surroundg parentheses <code>()</code></li> <li>a capture for every argument in <code>argumentCaptures</code></li> </ul>"},{"location":"API/script/cppdocument.html#querymatch-querymemberstring-classname-string-membername","title":"QueryMatch queryMember(string className, string memberName)","text":"<p>Finds the member definition inside a class or struct definition. Returns a QueryMatch object containing the member definition if it exists.</p> <p>The returned QueryMatch instance will have the following captures available:</p> <ul> <li><code>member</code>: The full definition of the member</li> <li><code>type</code>: The type of the member, without <code>const</code> or any reference/pointer specifiers (i.e. <code>&amp;</code>/<code>*</code>)</li> <li><code>name</code>: The name of the member (should be equal to memberName)</li> </ul>"},{"location":"API/script/cppdocument.html#arrayquerymatch-querymethoddeclarationstring-classname-string-functionname","title":"array&lt;QueryMatch&gt; queryMethodDeclaration(string className, string functionName)","text":"<p>Finds the declaration of a method inside a class or struct definition.</p> <p>Returns a list of QueryMatch objects containing the declaration. A warning will be logged if no declarations are found.</p> <p>The returned QueryMatch instances contain the following captures:</p> <ul> <li><code>declaration</code>: The full declaration of the method</li> <li><code>function</code>: The function declaration, without the return type</li> <li><code>name</code>: The name of the function</li> </ul>"},{"location":"API/script/cppdocument.html#arrayquerymatch-querymethoddefinitionstring-scope-string-methodname","title":"array&lt;QueryMatch&gt; queryMethodDefinition(string scope, string methodName)","text":"<p>Returns the list of methods definitions matching the given name and scope. <code>scope</code> may be either a class name, a namespace or empty.</p> <p>Every QueryMatch returned by this function will have the following captures available:</p> <ul> <li><code>scope</code> - The scope of the method (if any is provided)</li> <li><code>name</code> - The name of the function</li> <li><code>definition</code> - The entire method definition</li> <li><code>parameter-list</code> - The list of parameters</li> <li><code>parameters</code> - One capture per parameter, containing the type and name of the parameter, excluding comments!</li> <li><code>body</code> - The body of the method (including curly-braces)</li> </ul> <p>Please note that the return type is not available, as TreeSitter is not able to parse it easily.</p>"},{"location":"API/script/cppdocument.html#removeincludestring-include","title":"removeInclude(string include)","text":"<p>Remove <code>include</code> from the file. If the include is not in the file, do nothing (and returns true).</p> <p>The <code>include</code> string should be either <code>&lt;foo.h&gt;</code> or <code>\"foo.h\"</code>, it will returns false otherwise.</p>"},{"location":"API/script/cppdocument.html#int-selectblockend","title":"int selectBlockEnd()","text":"<p>Selects the text from current cursor position to the end of the block, and returns the new cursor position. A block is defined by {} or () or []. Does it <code>count</code> times.</p>"},{"location":"API/script/cppdocument.html#int-selectblockstart","title":"int selectBlockStart()","text":"<p>Selects the text from current cursor position to the start of the block, and returns the new cursor position. A block is defined by {} or () or []. Does it <code>count</code> times.</p>"},{"location":"API/script/cppdocument.html#int-selectblockup","title":"int selectBlockUp()","text":"<p>Selects the text of the block the cursor is in, and returns the new cursor position. A block is defined by {} or () or []. Does it <code>count</code> times.</p>"},{"location":"API/script/cppdocument.html#togglesection","title":"toggleSection()","text":"<p>Comments out a section of the code using <code>#ifdef</code> / <code>#endif</code>. The variable used is defined by the settings. <pre><code>\"toggle_section\": {\n    \"tag\": \"KDAB_TEMPORARILY_REMOVED\",\n    \"debug\": \"qDebug(\\\"%1 is commented out\\\")\"\n    \"return_values\": {\n        \"BOOL\": \"false\"\n    }\n}\n</code></pre> <code>debug</code> is the debug line to show, if empty it won't show anything. <code>return_values</code> gives a mapping for the value returned by the function. In this example, if the returned type is <code>BOOL</code>, it will return <code>false</code>. If text is selected, it comment out the lines of the selected text. Otherwise, it will comment the function the cursor is in. In the latter case, if the function is already commented, it will remove the commented section.</p>"},{"location":"API/script/dataexchange.html","title":"DataExchange","text":"<p>DataExchange entries in a MFC C++ document. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/dataexchange.html#properties","title":"Properties","text":"Name string className list&lt;DataExchangeEntry&gt; entries RangeMark range"},{"location":"API/script/dataexchange.html#detailed-description","title":"Detailed Description","text":"<p>The <code>DataExchange</code> object represents the data contained in the MFC <code>DoDataExchange</code> method.</p>"},{"location":"API/script/dataexchange.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/dataexchange.html#string-classname","title":"string className","text":"<p>The name of the class this data exchange belongs to.</p>"},{"location":"API/script/dataexchange.html#listdataexchangeentry-entries","title":"list&lt;DataExchangeEntry&gt; entries","text":"<p>All entries found in the data exchange method as <code>DataExchangeEntry</code>.</p>"},{"location":"API/script/dataexchange.html#rangemark-range","title":"RangeMark range","text":"<p>The entire range of the <code>DoDataExchange</code> method.</p>"},{"location":"API/script/dataexchangeentry.html","title":"DataExchangeEntry","text":"<p>Refers to a single entry within the <code>DoDataExchange</code> More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/dataexchangeentry.html#properties","title":"Properties","text":"Name string function string idc string member"},{"location":"API/script/dataexchangeentry.html#detailed-description","title":"Detailed Description","text":"<p>A DataExchangeEntry is a single entry within the <code>DoDataExchange</code>. It contains the function, member and idc used for the entry.</p>"},{"location":"API/script/dataexchangeentry.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/dataexchangeentry.html#string-function","title":"string function","text":"<p>Function of the data exchange, see Standard Dialog Data Exchange Routines.</p>"},{"location":"API/script/dataexchangeentry.html#string-idc","title":"string idc","text":"<p>The IDC of the data exchange</p>"},{"location":"API/script/dataexchangeentry.html#string-member","title":"string member","text":"<p>The member of the data exchange.</p>"},{"location":"API/script/dir.html","title":"Dir","text":"<p>Singleton with methods to handle directories. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/dir.html#properties","title":"Properties","text":"Name string currentPath string currentScriptPath string homePath string rootPath char separator string tempPath"},{"location":"API/script/dir.html#methods","title":"Methods","text":"Name string cleanPath(string path) QDirValueType create(string path) QDirValueType current() QDirValueType currentScript() string fromNativeSeparators(string pathName) QDirValueType home() bool isAbsolutePath(string path) bool isRelativePath(string path) bool match(array&lt;string&gt; filters, string fileName) bool match(string filter, string fileName) QDirValueType root() QDirValueType temp() string toNativeSeparators(string pathName)"},{"location":"API/script/dir.html#detailed-description","title":"Detailed Description","text":"<p>The <code>Dir</code> singleton implements most of the static methods from <code>QDir</code>, check QDir documentation.</p>"},{"location":"API/script/dir.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/dir.html#string-currentpath","title":"string currentPath","text":""},{"location":"API/script/dir.html#string-currentscriptpath","title":"string currentScriptPath","text":""},{"location":"API/script/dir.html#string-homepath","title":"string homePath","text":""},{"location":"API/script/dir.html#string-rootpath","title":"string rootPath","text":""},{"location":"API/script/dir.html#char-separator","title":"char separator","text":""},{"location":"API/script/dir.html#string-temppath","title":"string tempPath","text":""},{"location":"API/script/dir.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/dir.html#string-cleanpathstring-path","title":"string cleanPath(string path)","text":""},{"location":"API/script/dir.html#qdirvaluetype-createstring-path","title":"QDirValueType create(string path)","text":""},{"location":"API/script/dir.html#qdirvaluetype-current","title":"QDirValueType current()","text":""},{"location":"API/script/dir.html#qdirvaluetype-currentscript","title":"QDirValueType currentScript()","text":""},{"location":"API/script/dir.html#string-fromnativeseparatorsstring-pathname","title":"string fromNativeSeparators(string pathName)","text":""},{"location":"API/script/dir.html#qdirvaluetype-home","title":"QDirValueType home()","text":""},{"location":"API/script/dir.html#bool-isabsolutepathstring-path","title":"bool isAbsolutePath(string path)","text":""},{"location":"API/script/dir.html#bool-isrelativepathstring-path","title":"bool isRelativePath(string path)","text":""},{"location":"API/script/dir.html#bool-matcharraystring-filters-string-filenamebool-matchstring-filter-string-filename","title":"bool match(array&lt;string&gt; filters, string fileName)bool match(string filter, string fileName)","text":""},{"location":"API/script/dir.html#qdirvaluetype-root","title":"QDirValueType root()","text":""},{"location":"API/script/dir.html#qdirvaluetype-temp","title":"QDirValueType temp()","text":""},{"location":"API/script/dir.html#string-tonativeseparatorsstring-pathname","title":"string toNativeSeparators(string pathName)","text":""},{"location":"API/script/document.html","title":"Document","text":"<p>Base class for all documents More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/document.html#properties","title":"Properties","text":"Name string errorString bool exists string fileName bool hasChanged Type type"},{"location":"API/script/document.html#methods","title":"Methods","text":"Name bool close() bool load(string fileName) bool save() bool saveAs(string fileName)"},{"location":"API/script/document.html#detailed-description","title":"Detailed Description","text":"<p>The <code>Document</code> class is the base class for all documents. A document is a file loaded by Knut and that can be used in script (either to get data or to edit).</p>"},{"location":"API/script/document.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/document.html#string-errorstring","title":"string errorString","text":"<p>Returns the error string if an error occurred while loading the document, otherwise returns an empty string.</p>"},{"location":"API/script/document.html#bool-exists","title":"bool exists","text":"<p>Returns true if the document is a file on the disk, otherwise returns false.</p>"},{"location":"API/script/document.html#string-filename","title":"string fileName","text":"<p>Filename of the current document, changing it will load a new file without changing the type. It's better to use a new <code>Document</code> to open a new file.</p> <p>Changing the filename will: - save the current document automatically - load the new document - put an error in <code>errorString</code> if it can't be loaded</p>"},{"location":"API/script/document.html#bool-haschanged","title":"bool hasChanged","text":"<p>Returns true if the document has been edited, otherwise returns false.</p>"},{"location":"API/script/document.html#type-type","title":"Type type","text":"<p>Returns the current type of the document, please note that the type is fixed once, and won't change. Available types are:</p> <ul> <li><code>Document.Text</code></li> <li><code>Document.Rc</code></li> </ul>"},{"location":"API/script/document.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/document.html#bool-close","title":"bool close()","text":"<p>Close the current document. If the current document has some changes, save them automatically.</p>"},{"location":"API/script/document.html#bool-loadstring-filename","title":"bool load(string fileName)","text":"<p>Load the document <code>fileName</code> without changing the type. If the current document has some changes, save them automatically. In case of error put the error text in the <code>errorString</code> property.</p>"},{"location":"API/script/document.html#bool-save","title":"bool save()","text":"<p>Save the current document, in case of error put the error text in the <code>errorString</code> property.</p>"},{"location":"API/script/document.html#bool-saveasstring-filename","title":"bool saveAs(string fileName)","text":"<p>Save the current document as fileName, the previous file (if it exists) is not changed, and the current document takes the new <code>fileName</code>. In case of error put the error text in the <code>errorString</code> property.</p>"},{"location":"API/script/file.html","title":"File","text":"<p>Singleton with methods to handle files. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/file.html#methods","title":"Methods","text":"Name bool copy(string fileName, string newName) bool exists(string fileName) string readAll(string fileName) bool remove(string fileName) bool rename(string oldName, string newName) bool touch(string fileName)"},{"location":"API/script/file.html#detailed-description","title":"Detailed Description","text":"<p>The <code>File</code> singleton implements most of the static methods from <code>QFile</code>, check QFile documentation.</p>"},{"location":"API/script/file.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/file.html#bool-copystring-filename-string-newname","title":"bool copy(string fileName, string newName)","text":""},{"location":"API/script/file.html#bool-existsstring-filename","title":"bool exists(string fileName)","text":""},{"location":"API/script/file.html#string-readallstring-filename","title":"string readAll(string fileName)","text":""},{"location":"API/script/file.html#bool-removestring-filename","title":"bool remove(string fileName)","text":""},{"location":"API/script/file.html#bool-renamestring-oldname-string-newname","title":"bool rename(string oldName, string newName)","text":""},{"location":"API/script/file.html#bool-touchstring-filename","title":"bool touch(string fileName)","text":""},{"location":"API/script/fileinfo.html","title":"FileInfo","text":"<p>Singleton with methods to handle file information. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/fileinfo.html#methods","title":"Methods","text":"Name QFileInfoValueType create(string file) bool exists(string file)"},{"location":"API/script/fileinfo.html#detailed-description","title":"Detailed Description","text":"<p>The <code>FileInfo</code> singleton implements most of the static methods from <code>QFileInfo</code>, check QFileInfo documentation.</p>"},{"location":"API/script/fileinfo.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/fileinfo.html#qfileinfovaluetype-createstring-file","title":"QFileInfoValueType create(string file)","text":""},{"location":"API/script/fileinfo.html#bool-existsstring-file","title":"bool exists(string file)","text":""},{"location":"API/script/functionargument.html","title":"FunctionArgument","text":"<p>Experimental API</p> <p>The API here is still experimental, and may change in follow-up release. Use it at your own risk.</p> <p>Represents an argument to be passed to the function More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/functionargument.html#properties","title":"Properties","text":"Name string name string type"},{"location":"API/script/functionargument.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/functionargument.html#string-name","title":"string name","text":"<p>Returns the name of this argument.</p>"},{"location":"API/script/functionargument.html#string-type","title":"string type","text":"<p>Returns the type of this argument.</p>"},{"location":"API/script/functionsymbol.html","title":"FunctionSymbol","text":"<p>Experimental API</p> <p>The API here is still experimental, and may change in follow-up release. Use it at your own risk.</p> <p>Represents a function or a method in the current file More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/functionsymbol.html#properties","title":"Properties","text":"Name vector&lt;FunctionArgument&gt; arguments TextRange range string returnType"},{"location":"API/script/functionsymbol.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/functionsymbol.html#vectorfunctionargument-arguments","title":"vector&lt;FunctionArgument&gt; arguments","text":"<p>Returns the list of arguments being passed to this function.</p>"},{"location":"API/script/functionsymbol.html#textrange-range","title":"TextRange range","text":"<p>The range enclosing this function, not including leading/trailing whitespace but everything else like comments.</p>"},{"location":"API/script/functionsymbol.html#string-returntype","title":"string returnType","text":"<p>Returns the return type of this function.</p>"},{"location":"API/script/mark.html","title":"Mark","text":"<p>Keeps track of a position in a text document. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/mark.html#properties","title":"Properties","text":"Name TextDocument document bool isValid bool line"},{"location":"API/script/mark.html#methods","title":"Methods","text":"Name restore()"},{"location":"API/script/mark.html#detailed-description","title":"Detailed Description","text":"<p>The Mark object helps you track a logical position in a file. Its <code>line</code> and <code>column</code> properties will change as text are deleted or inserted before the mark.</p> <p>A mark is always created by a TextDocument.</p>"},{"location":"API/script/mark.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/mark.html#textdocument-document","title":"TextDocument document","text":"<p>This read-only property returns the document the mark is coming from.</p>"},{"location":"API/script/mark.html#bool-isvalid","title":"bool isValid","text":"<p>This read-only property indicates if the mark is valid.</p>"},{"location":"API/script/mark.html#bool-line","title":"bool line","text":"<p>Those read-only properties holds the position of the mark. They will be updated if text is deleted or inserted.</p>"},{"location":"API/script/mark.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/mark.html#restore","title":"restore()","text":"<p>Returns the cursor position in the editor to the position saved by this object.</p>"},{"location":"API/script/menu.html","title":"Menu","text":"<p>Description of a RC file menu. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/menu.html#properties","title":"Properties","text":"Name array&lt;string&gt; actionIds array&lt;MenuItem&gt; children string id"},{"location":"API/script/menu.html#methods","title":"Methods","text":"Name bool contains(string id)"},{"location":"API/script/menu.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/menu.html#arraystring-actionids","title":"array&lt;string&gt; actionIds","text":"<p>This property holds all action ids used in the menu.</p>"},{"location":"API/script/menu.html#arraymenuitem-children","title":"array&lt;MenuItem&gt; children","text":"<p>This property holds the list of menu items inside the menu.</p>"},{"location":"API/script/menu.html#string-id","title":"string id","text":"<p>This property holds the id of the menu.</p>"},{"location":"API/script/menu.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/menu.html#bool-containsstring-id","title":"bool contains(string id)","text":"<p>Returns true if the menu contains the given <code>id</code></p>"},{"location":"API/script/menuitem.html","title":"MenuItem","text":"<p>Description of a RC file menu item. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/menuitem.html#properties","title":"Properties","text":"Name array&lt;MenuItem&gt; children string id bool isAction bool isSeparator bool isTopLevel string text"},{"location":"API/script/menuitem.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/menuitem.html#arraymenuitem-children","title":"array&lt;MenuItem&gt; children","text":"<p>This property holds the children of the menu item, in case this one is another level of menu.</p>"},{"location":"API/script/menuitem.html#string-id","title":"string id","text":"<p>This property holds the id of the menu item.</p>"},{"location":"API/script/menuitem.html#bool-isaction","title":"bool isAction","text":"<p>This property returns <code>true</code> if the menu item is an action.</p>"},{"location":"API/script/menuitem.html#bool-isseparator","title":"bool isSeparator","text":"<p>This property returns <code>true</code> if the menu item is a separator (horizontal line in the menu).</p>"},{"location":"API/script/menuitem.html#bool-istoplevel","title":"bool isTopLevel","text":"<p>This property returns <code>true</code> if the menu item is a top level item (direct children of the Menu).</p>"},{"location":"API/script/menuitem.html#string-text","title":"string text","text":"<p>This property holds the text of the menu item.</p>"},{"location":"API/script/message.html","title":"Message","text":"<p>Singleton with methods to display different messages to the user. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/message.html#methods","title":"Methods","text":"Name debug(string text) error(string text) log(string text) warning(string text)"},{"location":"API/script/message.html#detailed-description","title":"Detailed Description","text":"<p>The <code>message</code> property in QML can be used to display different messages to the user, via logs.</p> <pre><code>Message.log(\"Hello World!\")\n</code></pre>"},{"location":"API/script/message.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/message.html#debugstring-text","title":"debug(string text)","text":"<p>Shows the message <code>text</code> as a debug in the log.</p>"},{"location":"API/script/message.html#errorstring-text","title":"error(string text)","text":"<p>Shows the message <code>text</code> as an error in the log.</p>"},{"location":"API/script/message.html#logstring-text","title":"log(string text)","text":"<p>Shows the message <code>text</code> as a log in the log.</p>"},{"location":"API/script/message.html#warningstring-text","title":"warning(string text)","text":"<p>Shows the message <code>text</code> as a warning in the log.</p>"},{"location":"API/script/messagemap.html","title":"MessageMap","text":"<p>Message map in a MFC C++ document More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/messagemap.html#properties","title":"Properties","text":"Name string className list&lt;MessageMapEntry&gt; entries bool isValid RangeMark range string superClass"},{"location":"API/script/messagemap.html#methods","title":"Methods","text":"Name MessageMapEntry get(string name) list&lt;MessageMapEntry&gt; getAll(string name)"},{"location":"API/script/messagemap.html#detailed-description","title":"Detailed Description","text":"<p>The <code>MessageMap</code> object represents the data contained in the MFC MessageMap.</p>"},{"location":"API/script/messagemap.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/messagemap.html#string-classname","title":"string className","text":"<p>The name of the class this message map belongs to.</p>"},{"location":"API/script/messagemap.html#listmessagemapentry-entries","title":"list&lt;MessageMapEntry&gt; entries","text":"<p>All entries found in the MessageMap as <code>MessageMapEntry</code>.</p>"},{"location":"API/script/messagemap.html#bool-isvalid","title":"bool isValid","text":"<p>Whether the MessageMap refers to an actual message map. If no MessageMap could be found, this will be false.</p>"},{"location":"API/script/messagemap.html#rangemark-range","title":"RangeMark range","text":"<p>The entire range of the Message Map. Can be used to select &amp; delete the entire message map.</p>"},{"location":"API/script/messagemap.html#string-superclass","title":"string superClass","text":"<p>The name of the super class this class inherits from.</p>"},{"location":"API/script/messagemap.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/messagemap.html#messagemapentry-getstring-name","title":"MessageMapEntry get(string name)","text":"<p>Gets the first entry with the given <code>name</code>. If no entry could be found, isValid will be false on the resulting MessageMapEntry.</p>"},{"location":"API/script/messagemap.html#listmessagemapentry-getallstring-name","title":"list&lt;MessageMapEntry&gt; getAll(string name)","text":"<p>Gets all entries with the given <code>name</code>.</p>"},{"location":"API/script/messagemapentry.html","title":"MessageMapEntry","text":"<p>Refers to a single entry within the <code>MessageMap</code> More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/messagemapentry.html#properties","title":"Properties","text":"Name bool isValid string name list&lt;RangeMark&gt; parameters RangeMark range"},{"location":"API/script/messagemapentry.html#detailed-description","title":"Detailed Description","text":"<p>A MessageMapEntry is a single entry within the <code>MessageMap</code>. It contains the name of the message as well as the list of parameters.</p>"},{"location":"API/script/messagemapentry.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/messagemapentry.html#bool-isvalid","title":"bool isValid","text":"<p>Whether the struct refers to a real entry. Possible reasons why a MessageMapEntry might not be valid: - The entry was default-constructed. - The document this entry refers to no longer exists.</p> <p>Please note that an entry that has been deleted may still be valid, but all its ranges will be empty.</p>"},{"location":"API/script/messagemapentry.html#string-name","title":"string name","text":"<p>The name of the entry.</p>"},{"location":"API/script/messagemapentry.html#listrangemark-parameters","title":"list&lt;RangeMark&gt; parameters","text":"<p>A list of <code>RangeMark</code> instances referring to each parameter of the entry.</p>"},{"location":"API/script/messagemapentry.html#rangemark-range","title":"RangeMark range","text":"<p>The range of the entire message call, including parameters. Use this to select &amp; delete this message from the MESSAGE_MAP entirely.</p>"},{"location":"API/script/project.html","title":"Project","text":"<p>Singleton for handling the current project. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/project.html#properties","title":"Properties","text":"Name string currentDocument array&lt;string&gt; documents string root"},{"location":"API/script/project.html#methods","title":"Methods","text":"Name array&lt;string&gt; allFiles(PathType type = RelativeToRoot) array&lt;string&gt; allFilesWithExtension(string extension, PathType type = RelativeToRoot) array&lt;string&gt; allFilesWithExtensions(array&lt;string&gt; extensions, PathType type = RelativeToRoot) closeAll() Document get(string fileName) Document open(string fileName) openPrevious(int index = 1) saveAllDocuments()"},{"location":"API/script/project.html#detailed-description","title":"Detailed Description","text":"<p>The <code>Project</code> object is not meant to open multiple projects, but only open one.</p>"},{"location":"API/script/project.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/project.html#string-currentdocument","title":"string currentDocument","text":"<p>Current document opened in the project.</p>"},{"location":"API/script/project.html#arraystring-documents","title":"array&lt;string&gt; documents","text":"<p>Return all documents opened in the project.</p>"},{"location":"API/script/project.html#string-root","title":"string root","text":"<p>Current root path of the project, this can be set only once.</p>"},{"location":"API/script/project.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/project.html#arraystring-allfilespathtype-type-relativetoroot","title":"array&lt;string&gt; allFiles(PathType type = RelativeToRoot)","text":"<p>Returns all files in the current project. <code>type</code> defines the type of path, and can be one of those values:</p> <ul> <li><code>Project.FullPath</code></li> <li><code>Project.RelativeToRoot</code></li> </ul>"},{"location":"API/script/project.html#arraystring-allfileswithextensionstring-extension-pathtype-type-relativetoroot","title":"array&lt;string&gt; allFilesWithExtension(string extension, PathType type = RelativeToRoot)","text":"<p>Returns all files with the <code>extension</code> given in the current project. <code>type</code> defines the type of path, and can be one of those values:</p> <ul> <li><code>Project.FullPath</code></li> <li><code>Project.RelativeToRoot</code></li> </ul>"},{"location":"API/script/project.html#arraystring-allfileswithextensionsarraystring-extensions-pathtype-type-relativetoroot","title":"array&lt;string&gt; allFilesWithExtensions(array&lt;string&gt; extensions, PathType type = RelativeToRoot)","text":"<p>Returns all files with an extension from <code>extensions</code> in the current project. <code>type</code> defines the type of path, and can be one of those values:</p> <ul> <li><code>Project.FullPath</code></li> <li><code>Project.RelativeToRoot</code></li> </ul>"},{"location":"API/script/project.html#closeall","title":"closeAll()","text":"<p>Close all documents. If the document has some changes, save the changes.</p>"},{"location":"API/script/project.html#document-getstring-filename","title":"Document get(string fileName)","text":"<p>Gets the document for the given <code>fileName</code>. If the document is not opened yet, open it. If the document is already opened, returns the same instance, a document can't be open twice. If the fileName is relative, use the root path as the base.</p> <p>If the document does not exist, creates a new document (but don't save it yet).</p> <p>Note</p> <p>This command does not change the current document.</p>"},{"location":"API/script/project.html#document-openstring-filename","title":"Document open(string fileName)","text":"<p>Opens or creates a document for the given <code>fileName</code> and make it current. If the document is already opened, returns the same instance, a document can't be open twice. If the fileName is relative, use the root path as the base.</p> <p>If the document does not exist, creates a new document (but don't save it yet).</p>"},{"location":"API/script/project.html#openpreviousint-index-1","title":"openPrevious(int index = 1)","text":"<p>Open a previously opened document. <code>index</code> is the position of this document in the last opened document.</p> <p><code>document.openPrevious(1)</code> (the default) opens the last document, like Ctrl+Tab in any editors.</p>"},{"location":"API/script/project.html#savealldocuments","title":"saveAllDocuments()","text":"<p>Save all Documents opened in project.</p>"},{"location":"API/script/qdirvaluetype.html","title":"QDirValueType","text":"<p>Wrapper around the <code>QDir</code> class. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/qdirvaluetype.html#properties","title":"Properties","text":"Name string absolutePath string canonicalPath int count string dirName bool exists bool isAbsolute bool isReadable bool isRelative bool isRoot string path"},{"location":"API/script/qdirvaluetype.html#methods","title":"Methods","text":"Name string at(int pos) bool cd(string dirName) bool cdUp() array&lt;string&gt; entryList(int filters, int sort) array&lt;string&gt; entryList(string nameFilter, int filters, int sort) array&lt;string&gt; entryList(array&lt;string&gt; nameFilters, int filters, int sort) bool fileExists(string name) bool makeAbsolute() bool mkdir(string dirName) bool mkpath(string dirPath) bool remove(string fileName) bool removeRecursively() bool rename(string oldName, string newName) bool rmdir(string dirName) bool rmpath(string dirPath)"},{"location":"API/script/qdirvaluetype.html#detailed-description","title":"Detailed Description","text":"<p>The <code>QDirValueType</code> is a wrapper around the <code>QDir</code> C++ class, check QDir documentation. It can only be created using Dir singleton.</p>"},{"location":"API/script/qdirvaluetype.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/qdirvaluetype.html#string-absolutepath","title":"string absolutePath","text":""},{"location":"API/script/qdirvaluetype.html#string-canonicalpath","title":"string canonicalPath","text":""},{"location":"API/script/qdirvaluetype.html#int-count","title":"int count","text":""},{"location":"API/script/qdirvaluetype.html#string-dirname","title":"string dirName","text":""},{"location":"API/script/qdirvaluetype.html#bool-exists","title":"bool exists","text":""},{"location":"API/script/qdirvaluetype.html#bool-isabsolute","title":"bool isAbsolute","text":""},{"location":"API/script/qdirvaluetype.html#bool-isreadable","title":"bool isReadable","text":""},{"location":"API/script/qdirvaluetype.html#bool-isrelative","title":"bool isRelative","text":""},{"location":"API/script/qdirvaluetype.html#bool-isroot","title":"bool isRoot","text":""},{"location":"API/script/qdirvaluetype.html#string-path","title":"string path","text":""},{"location":"API/script/qdirvaluetype.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/qdirvaluetype.html#string-atint-pos","title":"string at(int pos)","text":""},{"location":"API/script/qdirvaluetype.html#bool-cdstring-dirname","title":"bool cd(string dirName)","text":""},{"location":"API/script/qdirvaluetype.html#bool-cdup","title":"bool cdUp()","text":""},{"location":"API/script/qdirvaluetype.html#arraystring-entrylistint-filters-int-sortarraystring-entryliststring-namefilter-int-filters-int-sortarraystring-entrylistarraystring-namefilters-int-filters-int-sort","title":"array&lt;string&gt; entryList(int filters, int sort)array&lt;string&gt; entryList(string nameFilter, int filters, int sort)array&lt;string&gt; entryList(array&lt;string&gt; nameFilters, int filters, int sort)","text":"<p><code>filters</code> is a combination of (default is <code>Dir.NoFilter</code>):</p> <ul> <li><code>Dir.Dirs</code></li> <li><code>Dir.Files</code></li> <li><code>Dir.Drives</code></li> <li><code>Dir.NoSymLinks</code></li> <li><code>Dir.AllEntries</code></li> <li><code>Dir.TypeMask</code></li> <li><code>Dir.Readable</code></li> <li><code>Dir.Writable</code></li> <li><code>Dir.Executable</code></li> <li><code>Dir.PermissionMask</code></li> <li><code>Dir.Modified</code></li> <li><code>Dir.Hidden</code></li> <li><code>Dir.System</code></li> <li><code>Dir.AccessMask</code></li> <li><code>Dir.AllDirs</code></li> <li><code>Dir.CaseSensitive</code></li> <li><code>Dir.NoDot</code></li> <li><code>Dir.NoDotDot</code></li> <li><code>Dir.NoDotAndDotDot</code></li> <li><code>Dir.NoFilter</code></li> </ul> <p><code>sort</code> is a combination of (default is <code>Dir.NoSort</code>):</p> <ul> <li><code>Dir.Name</code></li> <li><code>Dir.Time</code></li> <li><code>Dir.Size</code></li> <li><code>Dir.Unsorted</code></li> <li><code>Dir.SortByMask</code></li> <li><code>Dir.DirsFirst</code></li> <li><code>Dir.Reversed</code></li> <li><code>Dir.IgnoreCase</code></li> <li><code>Dir.DirsLast</code></li> <li><code>Dir.LocaleAware</code></li> <li><code>Dir.Type</code></li> <li><code>Dir.NoSory</code></li> </ul>"},{"location":"API/script/qdirvaluetype.html#bool-fileexistsstring-name","title":"bool fileExists(string name)","text":""},{"location":"API/script/qdirvaluetype.html#bool-makeabsolute","title":"bool makeAbsolute()","text":""},{"location":"API/script/qdirvaluetype.html#bool-mkdirstring-dirname","title":"bool mkdir(string dirName)","text":""},{"location":"API/script/qdirvaluetype.html#bool-mkpathstring-dirpath","title":"bool mkpath(string dirPath)","text":""},{"location":"API/script/qdirvaluetype.html#bool-removestring-filename","title":"bool remove(string fileName)","text":""},{"location":"API/script/qdirvaluetype.html#bool-removerecursively","title":"bool removeRecursively()","text":""},{"location":"API/script/qdirvaluetype.html#bool-renamestring-oldname-string-newname","title":"bool rename(string oldName, string newName)","text":""},{"location":"API/script/qdirvaluetype.html#bool-rmdirstring-dirname","title":"bool rmdir(string dirName)","text":""},{"location":"API/script/qdirvaluetype.html#bool-rmpathstring-dirpath","title":"bool rmpath(string dirPath)","text":""},{"location":"API/script/qfileinfovaluetype.html","title":"QFileInfoValueType","text":"<p>Wrapper around the <code>QFileInfo</code> class. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/qfileinfovaluetype.html#properties","title":"Properties","text":"Name QDirValueType absoluteDir string absoluteFilePath string absolutePath string baseName string bundleName string canonicalFilePath string canonicalPath string completeBaseName string completeSuffix Date created QDirValueType dir bool exists string fileName string filePath string group int groupId bool isAbsolute bool isBundle bool isDir bool isExecutable bool isFile bool isHidden bool isReadable bool isRelative bool isRoot bool isSymLink bool isWritable Date lastModified Date lastRead string owner int ownerId string path int size string suffix string symLinkTarget"},{"location":"API/script/qfileinfovaluetype.html#detailed-description","title":"Detailed Description","text":"<p>The <code>QFileInfoValueType</code> is a wrapper around the <code>QFileInfo</code> C++ class, check QFileInfo documentation. It can only be created using [FileInfo](fileinfo.md].</p>"},{"location":"API/script/qfileinfovaluetype.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/qfileinfovaluetype.html#qdirvaluetype-absolutedir","title":"QDirValueType absoluteDir","text":""},{"location":"API/script/qfileinfovaluetype.html#string-absolutefilepath","title":"string absoluteFilePath","text":""},{"location":"API/script/qfileinfovaluetype.html#string-absolutepath","title":"string absolutePath","text":""},{"location":"API/script/qfileinfovaluetype.html#string-basename","title":"string baseName","text":""},{"location":"API/script/qfileinfovaluetype.html#string-bundlename","title":"string bundleName","text":""},{"location":"API/script/qfileinfovaluetype.html#string-canonicalfilepath","title":"string canonicalFilePath","text":""},{"location":"API/script/qfileinfovaluetype.html#string-canonicalpath","title":"string canonicalPath","text":""},{"location":"API/script/qfileinfovaluetype.html#string-completebasename","title":"string completeBaseName","text":""},{"location":"API/script/qfileinfovaluetype.html#string-completesuffix","title":"string completeSuffix","text":""},{"location":"API/script/qfileinfovaluetype.html#date-created","title":"Date created","text":""},{"location":"API/script/qfileinfovaluetype.html#qdirvaluetype-dir","title":"QDirValueType dir","text":""},{"location":"API/script/qfileinfovaluetype.html#bool-exists","title":"bool exists","text":""},{"location":"API/script/qfileinfovaluetype.html#string-filename","title":"string fileName","text":""},{"location":"API/script/qfileinfovaluetype.html#string-filepath","title":"string filePath","text":""},{"location":"API/script/qfileinfovaluetype.html#string-group","title":"string group","text":""},{"location":"API/script/qfileinfovaluetype.html#int-groupid","title":"int groupId","text":""},{"location":"API/script/qfileinfovaluetype.html#bool-isabsolute","title":"bool isAbsolute","text":""},{"location":"API/script/qfileinfovaluetype.html#bool-isbundle","title":"bool isBundle","text":""},{"location":"API/script/qfileinfovaluetype.html#bool-isdir","title":"bool isDir","text":""},{"location":"API/script/qfileinfovaluetype.html#bool-isexecutable","title":"bool isExecutable","text":""},{"location":"API/script/qfileinfovaluetype.html#bool-isfile","title":"bool isFile","text":""},{"location":"API/script/qfileinfovaluetype.html#bool-ishidden","title":"bool isHidden","text":""},{"location":"API/script/qfileinfovaluetype.html#bool-isreadable","title":"bool isReadable","text":""},{"location":"API/script/qfileinfovaluetype.html#bool-isrelative","title":"bool isRelative","text":""},{"location":"API/script/qfileinfovaluetype.html#bool-isroot","title":"bool isRoot","text":""},{"location":"API/script/qfileinfovaluetype.html#bool-issymlink","title":"bool isSymLink","text":""},{"location":"API/script/qfileinfovaluetype.html#bool-iswritable","title":"bool isWritable","text":""},{"location":"API/script/qfileinfovaluetype.html#date-lastmodified","title":"Date lastModified","text":""},{"location":"API/script/qfileinfovaluetype.html#date-lastread","title":"Date lastRead","text":""},{"location":"API/script/qfileinfovaluetype.html#string-owner","title":"string owner","text":""},{"location":"API/script/qfileinfovaluetype.html#int-ownerid","title":"int ownerId","text":""},{"location":"API/script/qfileinfovaluetype.html#string-path","title":"string path","text":""},{"location":"API/script/qfileinfovaluetype.html#int-size","title":"int size","text":""},{"location":"API/script/qfileinfovaluetype.html#string-suffix","title":"string suffix","text":""},{"location":"API/script/qfileinfovaluetype.html#string-symlinktarget","title":"string symLinkTarget","text":""},{"location":"API/script/qttsdocument.html","title":"QtTsDocument","text":"<p>Provides access to the content of a Ts file (Qt linguist). More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/qttsdocument.html#properties","title":"Properties","text":"Name string language array&lt;QtUiMessage&gt; messages string sourceLanguage"},{"location":"API/script/qttsdocument.html#methods","title":"Methods","text":"Name addMessage(string context, string location, string source, string translation) setLanguage(string lang) setSourceLanguage(string lang)"},{"location":"API/script/qttsdocument.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/qttsdocument.html#string-language","title":"string language","text":"<p>Return language name.</p>"},{"location":"API/script/qttsdocument.html#arrayqtuimessage-messages","title":"array&lt;QtUiMessage&gt; messages","text":"<p>List of all translations in the ts file.</p>"},{"location":"API/script/qttsdocument.html#string-sourcelanguage","title":"string sourceLanguage","text":"<p>Return source language name.</p>"},{"location":"API/script/qttsdocument.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/qttsdocument.html#addmessagestring-context-string-location-string-source-string-translation","title":"addMessage(string context, string location, string source, string translation)","text":"<p>Add a new source text, its translation located in location within the given context.</p>"},{"location":"API/script/qttsdocument.html#setlanguagestring-lang","title":"setLanguage(string lang)","text":"<p>Change language.</p>"},{"location":"API/script/qttsdocument.html#setsourcelanguagestring-lang","title":"setSourceLanguage(string lang)","text":"<p>Change source language.</p>"},{"location":"API/script/qttsmessage.html","title":"QtTsMessage","text":"<p>Provides access to message. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/qttsmessage.html#properties","title":"Properties","text":"Name string comment string context string fileName string source string translation"},{"location":"API/script/qttsmessage.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/qttsmessage.html#string-comment","title":"string comment","text":"<p>Define comment.</p>"},{"location":"API/script/qttsmessage.html#string-context","title":"string context","text":"<p>Translate context (read only).</p>"},{"location":"API/script/qttsmessage.html#string-filename","title":"string fileName","text":"<p>FileName where come from translate string.</p>"},{"location":"API/script/qttsmessage.html#string-source","title":"string source","text":"<p>Original string which must be translated.</p>"},{"location":"API/script/qttsmessage.html#string-translation","title":"string translation","text":"<p>String translated in specific language.</p>"},{"location":"API/script/qtuidocument.html","title":"QtUiDocument","text":"<p>Provides access to the content of a Ui file (Qt designer file). More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/qtuidocument.html#properties","title":"Properties","text":"Name array&lt;QtUiWidget&gt; widgets"},{"location":"API/script/qtuidocument.html#methods","title":"Methods","text":"Name QtUiWidget addCustomWidget(string className, string baseClassName, string header, bool isContainer) QtUiWidget addWidget(string className, string name, QtUiWidget parent) QtUiWidget findWidget(string name) preview()"},{"location":"API/script/qtuidocument.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/qtuidocument.html#arrayqtuiwidget-widgets","title":"array&lt;QtUiWidget&gt; widgets","text":"<p>List of all widgets in the ui file.</p>"},{"location":"API/script/qtuidocument.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/qtuidocument.html#qtuiwidget-addcustomwidgetstring-classname-string-baseclassname-string-header-bool-iscontainer","title":"QtUiWidget addCustomWidget(string className, string baseClassName, string header, bool isContainer)","text":"<p>Adds a new custom widget to the ui file.</p> <p>The <code>className</code> is the name of the custom widget, <code>baseClassName</code> is the name of the base class, <code>header</code> is the include. If <code>isContainer</code> is true, the widget is a container.</p> <p>The <code>header</code> should be in the form of <code>&lt;foo.h&gt;</code> or <code>\"foo.h\"</code>.</p>"},{"location":"API/script/qtuidocument.html#qtuiwidget-addwidgetstring-classname-string-name-qtuiwidget-parent","title":"QtUiWidget addWidget(string className, string name, QtUiWidget parent)","text":"<p>Creates a new widget with the given <code>className</code> and <code>name</code>, and adds it to the <code>parent</code> widget.</p> <p>If <code>parent</code> is null, it creates the top level widget (there can only be one).</p>"},{"location":"API/script/qtuidocument.html#qtuiwidget-findwidgetstring-name","title":"QtUiWidget findWidget(string name)","text":"<p>Returns the widget for the given <code>name</code>.</p>"},{"location":"API/script/qtuidocument.html#preview","title":"preview()","text":"<p>Opens a dialog to preview the current ui file.</p>"},{"location":"API/script/qtuiwidget.html","title":"QtUiWidget","text":"<p>Provides access to widget attributes in the ui files. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/qtuiwidget.html#properties","title":"Properties","text":"Name string className bool isRoot string name"},{"location":"API/script/qtuiwidget.html#methods","title":"Methods","text":"Name addProperty(string name, var value, object attributes = {}) var getProperty(string name)"},{"location":"API/script/qtuiwidget.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/qtuiwidget.html#string-classname","title":"string className","text":"<p>Name of the widget's class.</p>"},{"location":"API/script/qtuiwidget.html#bool-isroot","title":"bool isRoot","text":"<p>Read-only property returning <code>true</code> if the widget is the root widget.</p>"},{"location":"API/script/qtuiwidget.html#string-name","title":"string name","text":"<p>Name of the widget.</p>"},{"location":"API/script/qtuiwidget.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/qtuiwidget.html#addpropertystring-name-var-value-object-attributes","title":"addProperty(string name, var value, object attributes = {})","text":"<p>Adds a new property with the given <code>name</code>, <code>value</code> and <code>attributes</code>.</p> <p>Attributes is a has object, where the key is the attribute name and the value is the attribute value. For example: <pre><code>widget.setProperty(\"text\", \"My text\", { \"comment\": \"some comment for translation\" });\n</code></pre>"},{"location":"API/script/qtuiwidget.html#var-getpropertystring-name","title":"var getProperty(string name)","text":"<p>Returns the value of the property <code>name</code>.</p>"},{"location":"API/script/querycapture.html","title":"QueryCapture","text":"<p>Defines a capture made by a query. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/querycapture.html#properties","title":"Properties","text":"Name string name RangeMark range"},{"location":"API/script/querycapture.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/querycapture.html#string-name","title":"string name","text":"<p>Name of the capture inside the query.</p>"},{"location":"API/script/querycapture.html#rangemark-range","title":"RangeMark range","text":"<p>This read-only property contains the range of the capture in the document.</p>"},{"location":"API/script/querymatch.html","title":"QueryMatch","text":"<p>Contains all captures for a query match. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/querymatch.html#properties","title":"Properties","text":"Name array&lt;QueryCapture&gt; captures bool isEmpty"},{"location":"API/script/querymatch.html#methods","title":"Methods","text":"Name RangeMark get(string name) vector&lt;RangeMark&gt; getAll(string name) vector&lt;RangeMark&gt; getAllInRange(string name, RangeMark range) RangeMark getAllJoined(string name) RangeMark getInRange(string name, RangeMark range) array&lt;QueryMatch&gt; queryIn(capture, query)"},{"location":"API/script/querymatch.html#detailed-description","title":"Detailed Description","text":"<p>The QueryMatch object allows you to get access to all the captures made by a Tree-sitter query.</p> <p>Some high-level functions on CodeDocument and its subclasses also return QueryMatch instances. Usually these functions list which captures their matches will include.</p> <p>Note</p> <p>If you expect a query will only return a single QueryMatch, you can uses Javascripts destructuring assignment to easily get the right match: <pre><code>// Note the [] surrounding `match`\nlet [match] = document.query(\"...\");\nif (match) { // In case the query fails, match will be undefined.\n    // ...\n}\n</code></pre></p>"},{"location":"API/script/querymatch.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/querymatch.html#arrayquerycapture-captures","title":"array&lt;QueryCapture&gt; captures","text":"<p>List of all the captures in the current document.</p> <p>This allows you to get access to both the range and the name of the capture.</p> <p>Note</p> <p>Usually you won't need to access the captures directly.  Instead prefer to use the getter functions.</p>"},{"location":"API/script/querymatch.html#bool-isempty","title":"bool isEmpty","text":"<p>Return true if the <code>QueryMatch</code> is empty.</p>"},{"location":"API/script/querymatch.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/querymatch.html#rangemark-getstring-name","title":"RangeMark get(string name)","text":"<p>Returns the range covered by the first capture with the given <code>name</code>.</p> <p>This allows you to easily interact with a capture, if you know it will only cover a single node. <pre><code>let [function] = document.query(\"...\");\n\n// Print the captured text\nMessage.log(match.get(\"parameter-list\").text);\n// Replace the captured text with something else\nmatch.get(\"parameter-list\").replace(\"(int myParameter)\");\n</code></pre></p> <p>See the RangeMark documentation for more information.</p>"},{"location":"API/script/querymatch.html#vectorrangemark-getallstring-name","title":"vector&lt;RangeMark&gt; getAll(string name)","text":"<p>Returns all ranges that are covered by the captures of the given <code>name</code></p>"},{"location":"API/script/querymatch.html#vectorrangemark-getallinrangestring-name-rangemark-range","title":"vector&lt;RangeMark&gt; getAllInRange(string name, RangeMark range)","text":"<p>Returns all ranges that are covered by the captures of the given <code>name</code> in the given <code>range</code>.</p>"},{"location":"API/script/querymatch.html#rangemark-getalljoinedstring-name","title":"RangeMark getAllJoined(string name)","text":"<p>Returns a smallest range that contains all captures for the given <code>name</code>.</p>"},{"location":"API/script/querymatch.html#rangemark-getinrangestring-name-rangemark-range","title":"RangeMark getInRange(string name, RangeMark range)","text":"<p>Returns the range covered by the first capture with the given <code>name</code> in the given <code>range</code>.</p>"},{"location":"API/script/querymatch.html#arrayquerymatch-queryincapture-query","title":"array&lt;QueryMatch&gt; queryIn(capture, query)","text":"<p>Executes the treesitter <code>query</code> on all nodes that were captured under the <code>capture</code> name.</p> <p>This is useful if you want to query for nodes that might be nested arbitrarily deeply within a larger construct.</p> <p>E.g. To search for all \"return\" statements within a function, no matter how deep they are nested: <pre><code>let [function] = document.query(`\n     (function_definition\n         declarator: (\n             ; Some query to find a specific function\n         )\n         body: (compound_statement) @body)\n`);\nlet return_statements = function.queryIn(\"body\", \"(return_statement) @return\");\n</code></pre></p>"},{"location":"API/script/rangemark.html","title":"RangeMark","text":"<p>Keeps track of a range within a text document. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/rangemark.html#properties","title":"Properties","text":"Name bool isValid bool start bool text"},{"location":"API/script/rangemark.html#methods","title":"Methods","text":"Name RangeMark join(RangeMark other) remove() replace(string text) select() string textExcept(RangeMark other)"},{"location":"API/script/rangemark.html#detailed-description","title":"Detailed Description","text":"<p>The RangeMark object helps you track a logical range within a file. It's <code>start</code> and <code>end</code> properties will change as text is deleted or inserted before or even within the range.</p> <p>A RangeMark is always created by a TextDocument.</p>"},{"location":"API/script/rangemark.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/rangemark.html#bool-isvalid","title":"bool isValid","text":"<p>This read-only property indicates if the RangeMark is valid.</p>"},{"location":"API/script/rangemark.html#bool-start","title":"bool start","text":"<p>These read-only properties holds the start, end and length of the range. They will be updated as the text of the TextDocument changes.</p>"},{"location":"API/script/rangemark.html#bool-text","title":"bool text","text":"<p>This read-only property returns the text covered by the range.</p>"},{"location":"API/script/rangemark.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/rangemark.html#rangemark-joinrangemark-other","title":"RangeMark join(RangeMark other)","text":"<p>Joins the two <code>RangeMark</code> and creates a new one.</p> <p>The new <code>RangeMark</code> is spanning from the minimum of the start to the maximum of the end.</p>"},{"location":"API/script/rangemark.html#remove","title":"remove()","text":"<p>Deletes the text defined by this range in the source document.</p>"},{"location":"API/script/rangemark.html#replacestring-text","title":"replace(string text)","text":"<p>Replaces the text defined by this range with the <code>text</code> string in the source document.</p>"},{"location":"API/script/rangemark.html#select","title":"select()","text":"<p>Selects the text defined by this range in the source document.</p>"},{"location":"API/script/rangemark.html#string-textexceptrangemark-other","title":"string textExcept(RangeMark other)","text":"<p>Returns the text of this range without the text of the other range. This assumes that both ranges overlap.</p> <p>Otherwise, the entire text is returned.</p>"},{"location":"API/script/rcdocument.html","title":"RcDocument","text":"<p>Provides access to the content of a RC file (MFC resource file). More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/rcdocument.html#properties","title":"Properties","text":"Name array&lt;string&gt; acceleratorIds array&lt;Asset&gt; actions array&lt;Asset&gt; assets array&lt;string&gt; dialogIds string language array&lt;string&gt; languages array&lt;string&gt; menuIds array&lt;Menu&gt; menus array&lt;string&gt; stringIds array&lt;string&gt; strings array&lt;string&gt; toolbarIds array&lt;ToolBar&gt; toolbars bool valid"},{"location":"API/script/rcdocument.html#methods","title":"Methods","text":"Name ToolBar action(string id) array&lt;Action&gt; actionsFromMenu(string menuId) array&lt;Action&gt; actionsFromToolbar(string toolBarId) void convertActions(int flags) convertAssets(int flags) string convertLanguageToCode(string language) Widget dialog(string id, int flags, real scaleX, real scaleY) Menu menu(string id) bool mergeAllLanguages(string language = \"[default]\") bool mergeLanguages() bool previewDialog(Widget dialog) Menu ribbon(string id) string stringForDialog(string dialogId, string id) string stringForDialogAndLanguage(string language, string dialogId, string id) string stringForLanguage(string language, string id) array&lt;String&gt; stringsForLanguage(string language) string text(string id) ToolBar toolBar(string id) bool writeAssetsToImage(int flags) bool writeAssetsToQrc(string fileName) bool writeDialogToUi(Widget dialog, string fileName)"},{"location":"API/script/rcdocument.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/rcdocument.html#arraystring-acceleratorids","title":"array&lt;string&gt; acceleratorIds","text":"<p>This read-only property holds the list of accelerator's ids in the RC file.</p>"},{"location":"API/script/rcdocument.html#arrayasset-actions","title":"array&lt;Asset&gt; actions","text":"<p>This read-only property holds the list of actions in the RC file.</p>"},{"location":"API/script/rcdocument.html#arrayasset-assets","title":"array&lt;Asset&gt; assets","text":"<p>This read-only property holds the list of assets in the RC file.</p>"},{"location":"API/script/rcdocument.html#arraystring-dialogids","title":"array&lt;string&gt; dialogIds","text":"<p>This read-only property holds the list of dialog's ids in the RC file.</p>"},{"location":"API/script/rcdocument.html#string-language","title":"string language","text":"<p>This property holds the current language used for the data in the RC file. All other properties or method will work on the data for this specific language.</p>"},{"location":"API/script/rcdocument.html#arraystring-languages","title":"array&lt;string&gt; languages","text":"<p>This read-only property holds the list of languages available in the file.</p>"},{"location":"API/script/rcdocument.html#arraystring-menuids","title":"array&lt;string&gt; menuIds","text":"<p>This read-only property holds the list of menu's ids in the RC file.</p>"},{"location":"API/script/rcdocument.html#arraymenu-menus","title":"array&lt;Menu&gt; menus","text":"<p>This read-only property holds the list of menus in the RC file.</p>"},{"location":"API/script/rcdocument.html#arraystring-stringids","title":"array&lt;string&gt; stringIds","text":"<p>This read-only property holds the list of string's ids in the RC file.</p>"},{"location":"API/script/rcdocument.html#arraystring-strings","title":"array&lt;string&gt; strings","text":"<p>This read-only property holds the list of strings in the RC file.</p>"},{"location":"API/script/rcdocument.html#arraystring-toolbarids","title":"array&lt;string&gt; toolbarIds","text":"<p>This read-only property holds the list of toolbar's ids in the RC file.</p>"},{"location":"API/script/rcdocument.html#arraytoolbar-toolbars","title":"array&lt;ToolBar&gt; toolbars","text":"<p>This read-only property holds the list of toolbars in the RC file.</p>"},{"location":"API/script/rcdocument.html#bool-valid","title":"bool valid","text":"<p>This read-only property defines if the RC file is valid for our parser.</p> <p>Note that the RC file may be valid, and our parser needs to be updated.</p>"},{"location":"API/script/rcdocument.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/rcdocument.html#toolbar-actionstring-id","title":"ToolBar action(string id)","text":"<p>Returns the action for the given <code>id</code>.</p>"},{"location":"API/script/rcdocument.html#arrayaction-actionsfrommenustring-menuid","title":"array&lt;Action&gt; actionsFromMenu(string menuId)","text":"<p>Returns all actions used in the menu <code>menuId</code>.</p>"},{"location":"API/script/rcdocument.html#arrayaction-actionsfromtoolbarstring-toolbarid","title":"array&lt;Action&gt; actionsFromToolbar(string toolBarId)","text":"<p>Returns all actions used in the toolbar <code>toolBarId</code>.</p>"},{"location":"API/script/rcdocument.html#void-convertactionsint-flags","title":"void convertActions(int flags)","text":"<p>Experimental API</p> <p>The API here is still experimental, and may change in follow-up release. Use it at your own risk.</p> <p>Convert all actions using the <code>flags</code>.</p> <p>The <code>flags</code> are used to fill the iconPath of the action:</p> <ul> <li><code>RcDocument.RemoveUnknown</code>: remove the unknown assets</li> <li><code>RcDocument.SplitToolBar</code>: split toolbar's strips into individual icon, one per action</li> <li><code>RcDocument.ConvertToPng</code>: convert BMPs to PNGs, needed if we want to also change the transparency</li> <li><code>RcDocument.AllFlags</code>: combination of all above</li> </ul>"},{"location":"API/script/rcdocument.html#convertassetsint-flags","title":"convertAssets(int flags)","text":"<p>Convert all assets using the <code>flags</code>.</p> <ul> <li><code>RcDocument.RemoveUnknown</code>: remove the unknown assets</li> <li><code>RcDocument.SplitToolBar</code>: split toolbars strip into individual icon, one per action</li> <li><code>RcDocument.ConvertToPng</code>: convert BMPs to PNGs, needed if we want to also change the transparency</li> <li><code>RcDocument.AllFlags</code>: combination of all above</li> </ul>"},{"location":"API/script/rcdocument.html#string-convertlanguagetocodestring-language","title":"string convertLanguageToCode(string language)","text":"<p>Returns language code as defined by the ISO 639 for language name</p>"},{"location":"API/script/rcdocument.html#widget-dialogstring-id-int-flags-real-scalex-real-scaley","title":"Widget dialog(string id, int flags, real scaleX, real scaleY)","text":"<p>Returns the dialog for the given <code>id</code>.</p> <p>To do the conversion, the <code>flags</code> and scale factor <code>scaleX</code> and <code>scaleY</code> are used. Default values are coming from the project settings.</p> <p>Flags could be:</p> <ul> <li><code>RcDocument.UpdateHierarchy</code>: create a hierarchy of parent-children, by default there are none in MFC</li> <li><code>RcDocument.UpdateGeometry</code>: use the scale factor to change the dialog size</li> <li><code>RcDocument.UseIdForPixmap</code>: use the id as a resource value for the pixmaps in labels</li> <li><code>RcDocument.AllFlags</code>: combination of all above</li> </ul>"},{"location":"API/script/rcdocument.html#menu-menustring-id","title":"Menu menu(string id)","text":"<p>Returns the menu for the given <code>id</code>.</p>"},{"location":"API/script/rcdocument.html#bool-mergealllanguagesstring-language-default","title":"bool mergeAllLanguages(string language = \"[default]\")","text":"<p>Merges all languages data into one.</p>"},{"location":"API/script/rcdocument.html#bool-mergelanguages","title":"bool mergeLanguages()","text":"<p>Merges languages based on the language map in the settings.</p> <p>The language map gives for each language a resulting language, and if multiple source languages have the same resulting language they will be merged together.</p>"},{"location":"API/script/rcdocument.html#bool-previewdialogwidget-dialog","title":"bool previewDialog(Widget dialog)","text":"<p>Preview the result of the conversion RC-&gt;UI</p>"},{"location":"API/script/rcdocument.html#menu-ribbonstring-id","title":"Menu ribbon(string id)","text":"<p>Returns the ribbon for the given <code>id</code>.</p>"},{"location":"API/script/rcdocument.html#string-stringfordialogstring-dialogid-string-id","title":"string stringForDialog(string dialogId, string id)","text":"<p>Return the string for the given <code>dialogid</code> and id.</p>"},{"location":"API/script/rcdocument.html#string-stringfordialogandlanguagestring-language-string-dialogid-string-id","title":"string stringForDialogAndLanguage(string language, string dialogId, string id)","text":"<p>Return the string for the given <code>language</code>, <code>dialogid</code> and id.</p>"},{"location":"API/script/rcdocument.html#string-stringforlanguagestring-language-string-id","title":"string stringForLanguage(string language, string id)","text":"<p>Return the string for the given <code>id</code> in language <code>language</code>.</p>"},{"location":"API/script/rcdocument.html#arraystring-stringsforlanguagestring-language","title":"array&lt;String&gt; stringsForLanguage(string language)","text":"<p>Returns translated string for specific <code>language</code>.</p>"},{"location":"API/script/rcdocument.html#string-textstring-id","title":"string text(string id)","text":"<p>Return the string for the given <code>id</code>.</p>"},{"location":"API/script/rcdocument.html#toolbar-toolbarstring-id","title":"ToolBar toolBar(string id)","text":"<p>Returns the toolbar for the given <code>id</code>.</p>"},{"location":"API/script/rcdocument.html#bool-writeassetstoimageint-flags","title":"bool writeAssetsToImage(int flags)","text":"<p>Writes the assets to images, using <code>flags</code> for transparency settings. Returns <code>true</code> if no issues.</p> <p>Before writing the assets to disk, you first need to convert them using RcDocument::convertAssets. BMPs assets don't have transparency, but some specific colors are used for that in MFC. When writing the assets to PNGs, the <code>flags</code> define how to handle transparency:</p> <ul> <li><code>RcDocument.NoColors</code>: no transparent color</li> <li><code>RcDocument.Gray</code>: rgb(192, 192, 192) is used as a transparent color</li> <li><code>RcDocument.Magenta</code>: rgb(255, 0, 255) is used as a transparent color</li> <li><code>RcDocument.BottomLeftPixel</code>: the color of the bottom left pixel is used as transparent</li> <li><code>RcDocument.AllColors</code>: combination of all above</li> </ul>"},{"location":"API/script/rcdocument.html#bool-writeassetstoqrcstring-filename","title":"bool writeAssetsToQrc(string fileName)","text":"<p>Writes a qrc file with the given <code>fileName</code>. Returns <code>true</code> if no issues.</p> <p>Before writing the qrc file, you first need to convert them using RcDocument::convertAssets.</p>"},{"location":"API/script/rcdocument.html#bool-writedialogtouiwidget-dialog-string-filename","title":"bool writeDialogToUi(Widget dialog, string fileName)","text":"<p>Writes a ui file for the given <code>dialog</code>, to the given <code>fileName</code>. Return <code>true</code> if no issues.</p>"},{"location":"API/script/ribbon.html","title":"Ribbon","text":"<p>The ribbon description (not everything is read yet). More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/ribbon.html#properties","title":"Properties","text":"Name array&lt;RibbonCategory&gt; categories array&lt;RibbonContext&gt; contexts RibbonMenu menu"},{"location":"API/script/ribbon.html#detailed-description","title":"Detailed Description","text":"<p>A ribbon is made of multiple items:</p> <ul> <li>a file menu, top/left, which displays a popup menu when clicking (see RibbonMenu)</li> <li>multiple categories displayed as tabs<ul> <li>each with multiple panels (displayed as group of actions)</li> <li>each panel contains multiple elements (displayed as buttons, separators...)</li> </ul> </li> <li>multiple contexts, a context showing another tab with it's name in the titlebar<ul> <li>each context contains multiple categories</li> </ul> </li> </ul>"},{"location":"API/script/ribbon.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/ribbon.html#arrayribboncategory-categories","title":"array&lt;RibbonCategory&gt; categories","text":"<p>This property holds the children categories of this ribbon.</p>"},{"location":"API/script/ribbon.html#arrayribboncontext-contexts","title":"array&lt;RibbonContext&gt; contexts","text":"<p>This property holds the children contexts of this ribbon.</p>"},{"location":"API/script/ribbon.html#ribbonmenu-menu","title":"RibbonMenu menu","text":"<p>This property holds the menu of the ribbon.</p>"},{"location":"API/script/ribboncategory.html","title":"RibbonCategory","text":"<p>A tab (made of panels) in the ribbon. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/ribboncategory.html#properties","title":"Properties","text":"Name string keys string largeImage array&lt;RibbonPanel&gt; panels string smallImage string text"},{"location":"API/script/ribboncategory.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/ribboncategory.html#string-keys","title":"string keys","text":"<p>This property holds the keys of the category.</p>"},{"location":"API/script/ribboncategory.html#string-largeimage","title":"string largeImage","text":"<p>This property holds the image resource for large icons.</p>"},{"location":"API/script/ribboncategory.html#arrayribbonpanel-panels","title":"array&lt;RibbonPanel&gt; panels","text":"<p>This property holds the children panels of this category.</p>"},{"location":"API/script/ribboncategory.html#string-smallimage","title":"string smallImage","text":"<p>This property holds the image resource for small icons.</p>"},{"location":"API/script/ribboncategory.html#string-text","title":"string text","text":"<p>This property holds the text title of the category.</p>"},{"location":"API/script/ribboncontext.html","title":"RibbonContext","text":"<p>A context (tabs with a title) in the ribbon. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/ribboncontext.html#properties","title":"Properties","text":"Name array&lt;RibbonCategory&gt; categories string id string text"},{"location":"API/script/ribboncontext.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/ribboncontext.html#arrayribboncategory-categories","title":"array&lt;RibbonCategory&gt; categories","text":"<p>This property holds the children categories of this context.</p>"},{"location":"API/script/ribboncontext.html#string-id","title":"string id","text":"<p>This property holds the id of the context.</p>"},{"location":"API/script/ribboncontext.html#string-text","title":"string text","text":"<p>This property holds the text of the context.</p>"},{"location":"API/script/ribbonelement.html","title":"RibbonElement","text":"<p>An item in the ribbon (button, separator...). More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/ribbonelement.html#properties","title":"Properties","text":"Name array&lt;RibbonElement&gt; elements string id bool isSeparator string keys int largeIndex int smallIndex string text string type"},{"location":"API/script/ribbonelement.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/ribbonelement.html#arrayribbonelement-elements","title":"array&lt;RibbonElement&gt; elements","text":"<p>This property holds the children of this item, for creating menus.</p>"},{"location":"API/script/ribbonelement.html#string-id","title":"string id","text":"<p>This property holds the id of the element item.</p>"},{"location":"API/script/ribbonelement.html#bool-isseparator","title":"bool isSeparator","text":"<p>This property returns <code>true</code> if the element is a separator.</p>"},{"location":"API/script/ribbonelement.html#string-keys","title":"string keys","text":"<p>This property holds the keys of the element item.</p>"},{"location":"API/script/ribbonelement.html#int-largeindex","title":"int largeIndex","text":"<p>This property holds the index for the large icon (32x32 generally) used for the item.</p>"},{"location":"API/script/ribbonelement.html#int-smallindex","title":"int smallIndex","text":"<p>This property holds the index for the small icon (16x16 generally) used for the item.</p>"},{"location":"API/script/ribbonelement.html#string-text","title":"string text","text":"<p>This property holds the text of the element item.</p>"},{"location":"API/script/ribbonelement.html#string-type","title":"string type","text":"<p>This property holds the type of the element item (button, separator...).</p>"},{"location":"API/script/ribbonmenu.html","title":"RibbonMenu","text":"<p>A menu showing when clicking on the left/top icon in the ribbon. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/ribbonmenu.html#properties","title":"Properties","text":"Name array&lt;RibbonElement&gt; elements string largeImage string recentFilesText string smallImage string text"},{"location":"API/script/ribbonmenu.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/ribbonmenu.html#arrayribbonelement-elements","title":"array&lt;RibbonElement&gt; elements","text":"<p>This property holds the children elements of this menu.</p>"},{"location":"API/script/ribbonmenu.html#string-largeimage","title":"string largeImage","text":"<p>This property holds the image resource for large icons.</p>"},{"location":"API/script/ribbonmenu.html#string-recentfilestext","title":"string recentFilesText","text":"<p>This property holds the text for the recent files menu.</p>"},{"location":"API/script/ribbonmenu.html#string-smallimage","title":"string smallImage","text":"<p>This property holds the image resource for small icons.</p>"},{"location":"API/script/ribbonmenu.html#string-text","title":"string text","text":"<p>This property holds the text label of the menu.</p>"},{"location":"API/script/ribbonpanel.html","title":"RibbonPanel","text":"<p>An panel (group of elements) in the ribbon. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/ribbonpanel.html#properties","title":"Properties","text":"Name array&lt;RibbonElement&gt; elements string keys string text"},{"location":"API/script/ribbonpanel.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/ribbonpanel.html#arrayribbonelement-elements","title":"array&lt;RibbonElement&gt; elements","text":"<p>This property holds the children elements of this panel.</p>"},{"location":"API/script/ribbonpanel.html#string-keys","title":"string keys","text":"<p>This property holds the keys of the panel.</p>"},{"location":"API/script/ribbonpanel.html#string-text","title":"string text","text":"<p>This property holds the text title of the panel.</p>"},{"location":"API/script/script.html","title":"Script","text":"<p>Script object for writing non visual scripts. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/script.html#detailed-description","title":"Detailed Description","text":"<p>The <code>Script</code> is the base class for all creatable items in QML. It is needed as a <code>QtObject</code> can't have any children in QML. It can be used as the basis for non visual QML scripts:</p> <pre><code>import Script\n\nScript {\n// ...\n}\n</code></pre>"},{"location":"API/script/scriptdialog.html","title":"ScriptDialog","text":"<p>QML Item for writing visual scripts. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/scriptdialog.html#properties","title":"Properties","text":"Name var data bool interactive int stepCount"},{"location":"API/script/scriptdialog.html#methods","title":"Methods","text":"Name firstStep(string firstStep) nextStep(string title) runSteps(function generator) setStepCount(int stepCount)"},{"location":"API/script/scriptdialog.html#signals","title":"Signals","text":"Name onAccepted() onClicked(string name) onRejected()"},{"location":"API/script/scriptdialog.html#detailed-description","title":"Detailed Description","text":"<p>The <code>ScriptDialog</code> allows creating a script dialog based on a ui file. It requires creating a ui file with the same name as the qml script.</p> <p>Inside the dialog, all widget's main property is mapped to a property inside the data property, using the same name as the <code>objectName</code>. For example, the text of a <code>QLineEdit</code> with <code>objectName</code> set to <code>lineEdit</code> will be mapped to <code>data.lineEdit</code>.</p> <p>Buttons (<code>QPushButton</code> or <code>QToolButton</code>) <code>clicked</code> signal is available through the <code>onClikced</code> signal handler, with the button <code>objectName</code> as parameter.</p> <p><code>QDialogButtonBox</code> <code>accepted</code> or <code>rejected</code> signals are automatically connected and available through the <code>onAccepted</code> and <code>onRejected</code> signal handlers.</p> <pre><code>import Script\n\nScriptDialog {\n    property string text1: data.lineEdit\n    property string text2: data.comboBox\n    property int number: data.spinBox\n    property int number2: data.doubleSpinBox\n    property bool check: data.checkBox\n    property bool check2: data.radioButton\n    onClicked: (name) =&gt; {\n        if (name == \"pushButton\" || name == \"toolButton\")\n            console.log(name)\n    }\n    onAccepted: {\n        console.log(\"Accepted\")\n    }\n    onRejected: {\n        console.log(\"Rejected\")\n    }\n}\n</code></pre>"},{"location":"API/script/scriptdialog.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/scriptdialog.html#var-data","title":"var data","text":"<p>This read-only property contains all properties mapping the widgets.</p> <p>Use <code>data.objectName</code> to access the main property of a widget (the text for a <code>QLineEdit</code> for example).</p>"},{"location":"API/script/scriptdialog.html#bool-interactive","title":"bool interactive","text":"<p>If set to false, <code>runSteps</code> will not ask for user input, the entire script will be run at once. This is especially useful for testing.</p>"},{"location":"API/script/scriptdialog.html#int-stepcount","title":"int stepCount","text":"<p>Number of steps to display in the progress bar.</p>"},{"location":"API/script/scriptdialog.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/scriptdialog.html#firststepstring-firststep","title":"firstStep(string firstStep)","text":"<p>Starts a progress bar with the given <code>firstStep</code> title.</p> <p>The number of following <code>nextStep</code> calls (or yield calls if using runSteps) should be one less than the number of steps set here.</p>"},{"location":"API/script/scriptdialog.html#nextstepstring-title","title":"nextStep(string title)","text":"<p>Changes the progression to a new progress step.</p> <p>This will update the progress bar and the title of the progress dialog. Make sure that the number of steps is set correctly before calling this method.</p>"},{"location":"API/script/scriptdialog.html#runstepsfunction-generator","title":"runSteps(function generator)","text":"<p>Runs a script in multiple (interactive) steps.</p> <p>The argument to this function must be a JavaScript generator object (See this documentation on JS Generators).</p> <p>The generator should yield a string with the next step title, whenever the user should be able to pause the script and inspect the changes. This will behave the same as calling <code>nextStep</code>, but pauses the script, until the user continues or aborts the script.</p> <p>You can also mix and match between <code>yield</code> and <code>nextStep</code> calls.</p> <p>For the best experience, we recommend to use <code>setStepCount</code>, <code>firstStep</code> and <code>yield</code> to indicate the remaining progress.</p> <p>Example: <pre><code>function *conversionSteps() {\n   setStepCount(2)            // &lt;--- Initialize the number of steps\n   firstStep(\"Adding member\") // &lt;--- Start the first step\n   document.addMember(\"test\", \"int\", CppDocument.Public)\n\n   yield \"Inserting include\"  // &lt;--- The user can check that the member was inserted correctly\n   document.insertInclude(\"&lt;iostream&gt;\")\n}\n\nfunction convert() {\n   runSteps(conversionSteps())\n}\n</code></pre></p>"},{"location":"API/script/scriptdialog.html#setstepcountint-stepcount","title":"setStepCount(int stepCount)","text":"<p>Sets the number of steps to show in the progress bar.</p> <p>By default the value is 0, meaning there are no steps set. This will show an indeterminate progress bar. You can use the <code>stepCount</code> property to set the number of steps too.</p>"},{"location":"API/script/scriptdialog.html#signal-documentation","title":"Signal Documentation","text":""},{"location":"API/script/scriptdialog.html#onaccepted","title":"onAccepted()","text":"<p>This handler is called when a button with an accept role from a <code>QDialogButtonBox</code> is pressed (usually the OK button).</p>"},{"location":"API/script/scriptdialog.html#onclickedstring-name","title":"onClicked(string name)","text":"<p>This handler is called when a button is cliked, the <code>name</code> is the name of the button.</p>"},{"location":"API/script/scriptdialog.html#onrejected","title":"onRejected()","text":"<p>This handler is called when a button with a reject role from a <code>QDialogButtonBox</code> is pressed (usually the Cancel button).</p>"},{"location":"API/script/settings.html","title":"Settings","text":"<p>Singleton for accessing and editing persistent settings. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/settings.html#properties","title":"Properties","text":"Name bool isTesting"},{"location":"API/script/settings.html#methods","title":"Methods","text":"Name bool hasValue(string path) variant setValue(string path, variant value) variant value(string path, variant defaultValue = null)"},{"location":"API/script/settings.html#detailed-description","title":"Detailed Description","text":"<p>The settings are stored in a json file, and could be:</p> <ul> <li>bool</li> <li>int</li> <li>double</li> <li>string</li> <li>array&lt;string&gt;</li> </ul>"},{"location":"API/script/settings.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/settings.html#bool-istesting","title":"bool isTesting","text":"<p>Returns true if Knut is currently in a test, and false otherwise</p>"},{"location":"API/script/settings.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/settings.html#bool-hasvaluestring-path","title":"bool hasValue(string path)","text":"<p>Returns true if the project settings has a settings <code>path</code>.</p>"},{"location":"API/script/settings.html#variant-setvaluestring-path-variant-value","title":"variant setValue(string path, variant value)","text":"<p>Adds a new value <code>value</code> to the project settings at the given <code>path</code>. Returns <code>true</code> if the operation succeeded.</p>"},{"location":"API/script/settings.html#variant-valuestring-path-variant-defaultvalue-null","title":"variant value(string path, variant defaultValue = null)","text":"<p>Returns the value of the settings <code>path</code>, or <code>defaultValue</code> if the settings does not exist.</p>"},{"location":"API/script/shortcut.html","title":"Shortcut","text":"<p>Description of a RC file shortcut. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/shortcut.html#properties","title":"Properties","text":"Name string event bool unknown"},{"location":"API/script/shortcut.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/shortcut.html#string-event","title":"string event","text":"<p>This property holds the key combination for the event.</p>"},{"location":"API/script/shortcut.html#bool-unknown","title":"bool unknown","text":"<p>This property returns <code>true</code> if the key combination can't be parsed.</p>"},{"location":"API/script/string.html","title":"String","text":"<p>Description of a RC file string. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/string.html#properties","title":"Properties","text":"Name string id string text"},{"location":"API/script/string.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/string.html#string-id","title":"string id","text":"<p>This property holds the id of the string.</p>"},{"location":"API/script/string.html#string-text","title":"string text","text":"<p>This property holds the text of the string.</p>"},{"location":"API/script/symbol.html","title":"Symbol","text":"<p>Represent a symbol in the current file More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/symbol.html#properties","title":"Properties","text":"Name string description Kind kind string name TextRange range TextRange selectionRange"},{"location":"API/script/symbol.html#methods","title":"Methods","text":"Name bool isClass() bool isFunction() bool select()"},{"location":"API/script/symbol.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/symbol.html#string-description","title":"string description","text":"<p>Return more detail for this symbol, e.g the signature of a function.</p>"},{"location":"API/script/symbol.html#kind-kind","title":"Kind kind","text":"<p>Return the kind of this symbol. Available symbol kinds are:</p> <ul> <li><code>Symbol.File</code></li> <li><code>Symbol.Module</code></li> <li><code>Symbol.Namespace</code></li> <li><code>Symbol.Package</code></li> <li><code>Symbol.Class</code></li> <li><code>Symbol.Method</code></li> <li><code>Symbol.Property</code></li> <li><code>Symbol.Field</code></li> <li><code>Symbol.Constructor</code></li> <li><code>Symbol.Enum</code></li> <li><code>Symbol.Interface</code></li> <li><code>Symbol.Function</code></li> <li><code>Symbol.Variable</code></li> <li><code>Symbol.Constant</code></li> <li><code>Symbol.String</code></li> <li><code>Symbol.Number</code></li> <li><code>Symbol.Boolean</code></li> <li><code>Symbol.Array</code></li> <li><code>Symbol.Object</code></li> <li><code>Symbol.Key</code></li> <li><code>Symbol.Null</code></li> <li><code>Symbol.EnumMember</code></li> <li><code>Symbol.Struct</code></li> <li><code>Symbol.Event</code></li> <li><code>Symbol.Operator</code></li> <li><code>Symbol.TypeParameter</code></li> </ul>"},{"location":"API/script/symbol.html#string-name","title":"string name","text":"<p>Return the name of this symbol.</p>"},{"location":"API/script/symbol.html#textrange-range","title":"TextRange range","text":"<p>The range enclosing this symbol not including leading/trailing whitespace but everything else like comments. This information is typically used to determine if the clients cursor is inside the symbol to reveal in the symbol in the UI.</p>"},{"location":"API/script/symbol.html#textrange-selectionrange","title":"TextRange selectionRange","text":"<p>The range that should be selected and revealed when this symbol is being picked, e.g. the name of a function. Must be contained by the <code>range</code>.</p>"},{"location":"API/script/symbol.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/symbol.html#bool-isclass","title":"bool isClass()","text":"<p>Returns whether this Symbol refers to a class or struct.</p>"},{"location":"API/script/symbol.html#bool-isfunction","title":"bool isFunction()","text":"<p>Returns whether this Symbol refers to a function. This includes constructors and methods</p>"},{"location":"API/script/symbol.html#bool-select","title":"bool select()","text":"<p>Selects the current symbol.</p>"},{"location":"API/script/textdocument.html","title":"TextDocument","text":"<p>Document object for text files. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/textdocument.html#properties","title":"Properties","text":"Name int column string currentLine string currentWord int line int lineCount LineEnding lineEnding int position string selectedText int selectionEnd int selectionStart string text <p>Inherited properties: Document properties</p>"},{"location":"API/script/textdocument.html#methods","title":"Methods","text":"Name columnAtPosition(int position) copy() Mark createMark(int pos = -1) RangeMark createRangeMark() RangeMark createRangeMark(int from, int to) cut() deleteEndOfLine() deleteEndOfWord() deleteLine(int line = -1) deleteNextCharacter(int count = 1) deletePreviousCharacter(int count = 1) deleteRange(TextRange range) deleteRegion(int from, int to) deleteSelection() deleteStartOfLine() deleteStartOfWord() bool find(string text, int options = TextDocument.NoFindFlags) bool findRegexp(string regexp, int options = TextDocument.NoFindFlags) gotoEndOfDocument() gotoEndOfLine() gotoEndOfWord() gotoLine(int line, int column = 1) gotoMark(Mark mark) gotoNextChar(int count = 1) gotoNextLine(int count = 1) gotoNextWord(int count = 1) gotoPreviousChar(int count = 1) gotoPreviousLine(int count = 1) gotoPreviousWord(int count = 1) gotoStartOfDocument() gotoStartOfLine() gotoStartOfWord() bool hasSelection() indent(int count) indentationAtPosition(int pos) insert(string text) insertAtLine(string text, int line = -1) insertAtPosition(string text, int pos) lineAtPosition(int position) bool match(string regexp, int options = TextDocument.NoFindFlags) paste() positionAt(int line, int col) redo(int count) remove(int length) removeIndent(int count) replace(int length, string text) replace(TextRange range, string text) replace(int from, int to, string text) bool replaceAll(string before, string after, int options = TextDocument.NoFindFlags) bool replaceAllInRange(string before, string after, RangeMark range, int options = TextDocument.NoFindFlags) bool replaceAllRegexp(string regexp, string after, int options = TextDocument.NoFindFlags) bool replaceAllRegexpInRange(string regexp, string after, RangeMark range, int options = TextDocument.NoFindFlags) bool replaceOne(string before, string after, int options = TextDocument.NoFindFlags) selectAll() selectEndOfLine() selectEndOfWord() selectNextChar(int count = 1) selectNextLine(int count = 1) selectNextWord(int count = 1) selectPreviousChar(int count = 1) selectPreviousLine(int count = 1) selectPreviousWord(int count = 1) selectRange(TextRange range) selectRangeMark(RangeMark mark) selectRegion(int from, int to) selectStartOfLine(int count = 1) selectStartOfWord() selectTo(int pos) selectToMark(Mark mark) undo(int count) unselect() <p>Inherited methods: Document methods</p>"},{"location":"API/script/textdocument.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/textdocument.html#int-column","title":"int column","text":"<p>This read-only property holds the column of the cursor position. Be careful the column is 1-based, so the column before the first character is 1.</p>"},{"location":"API/script/textdocument.html#string-currentline","title":"string currentLine","text":"<p>This read-only property return the line under the current position.</p>"},{"location":"API/script/textdocument.html#string-currentword","title":"string currentWord","text":"<p>This read-only property return the word under the current position.</p>"},{"location":"API/script/textdocument.html#int-line","title":"int line","text":"<p>This read-only property holds the line of the cursor position. Be careful the line is 1-based, so the first line of the document is 1,</p>"},{"location":"API/script/textdocument.html#int-linecount","title":"int lineCount","text":"<p>This read-only property holds the number of lines in the document.</p>"},{"location":"API/script/textdocument.html#lineending-lineending","title":"LineEnding lineEnding","text":"<p>This property holds the line ending for the document. It can be one of those choices:</p> <ul> <li><code>TextDocument.LFLineEnding</code>: '\\n' character</li> <li><code>TextDocument.CRLFLineEnding</code>: '\\r\\n' characters</li> <li><code>TextDocument.NativeLineEnding</code>: LF on Linux and Mac, CRLF on Windows</li> </ul> <p>Native is the default for new documents.</p>"},{"location":"API/script/textdocument.html#int-position","title":"int position","text":"<p>This property holds the absolute position of the cursor inside the text document.</p>"},{"location":"API/script/textdocument.html#string-selectedtext","title":"string selectedText","text":"<p>This property holds the selected text of the document.</p>"},{"location":"API/script/textdocument.html#int-selectionend","title":"int selectionEnd","text":"<p>This property holds the end of the selection or position if the cursor doesn't have a selection.</p>"},{"location":"API/script/textdocument.html#int-selectionstart","title":"int selectionStart","text":"<p>This property holds the start of the selection or position if the cursor doesn't have a selection.</p>"},{"location":"API/script/textdocument.html#string-text","title":"string text","text":"<p>This property holds the text of the document.</p>"},{"location":"API/script/textdocument.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/textdocument.html#columnatpositionint-position","title":"columnAtPosition(int position)","text":"<p>Returns the column number for the given text cursor <code>position</code>. Or -1 if position is invalid</p>"},{"location":"API/script/textdocument.html#copy","title":"copy()","text":"<p>Copies the selected text.</p>"},{"location":"API/script/textdocument.html#mark-createmarkint-pos-1","title":"Mark createMark(int pos = -1)","text":"<p>Creates a mark at the given position <code>pos</code>. If <code>pos</code> is -1, it will create a mark at the current position.</p>"},{"location":"API/script/textdocument.html#rangemark-createrangemark","title":"RangeMark createRangeMark()","text":"<p>Creates a range mark from the current selection.</p> <p>Note: if there is no selection, the range mark will span an empty range!</p>"},{"location":"API/script/textdocument.html#rangemark-createrangemarkint-from-int-to","title":"RangeMark createRangeMark(int from, int to)","text":"<p>Creates a range mark from <code>from</code> to <code>to</code>.</p>"},{"location":"API/script/textdocument.html#cut","title":"cut()","text":"<p>Cuts the selected text.</p>"},{"location":"API/script/textdocument.html#deleteendofline","title":"deleteEndOfLine()","text":"<p>Deletes from the cursor position to the end of the line.</p>"},{"location":"API/script/textdocument.html#deleteendofword","title":"deleteEndOfWord()","text":"<p>Deletes from the cursor position to the end of the word.</p>"},{"location":"API/script/textdocument.html#deletelineint-line-1","title":"deleteLine(int line = -1)","text":"<p>Remove a the line <code>line</code>. If <code>line</code> is -1, remove the current line. <code>line</code> is 1-based.</p>"},{"location":"API/script/textdocument.html#deletenextcharacterint-count-1","title":"deleteNextCharacter(int count = 1)","text":"<p>Deletes the next <code>count</code> characters.</p>"},{"location":"API/script/textdocument.html#deletepreviouscharacterint-count-1","title":"deletePreviousCharacter(int count = 1)","text":"<p>Deletes the previous <code>count</code> characters.</p>"},{"location":"API/script/textdocument.html#deleterangetextrange-range","title":"deleteRange(TextRange range)","text":"<p>Deletes the range passed in parameter.</p>"},{"location":"API/script/textdocument.html#deleteregionint-from-int-to","title":"deleteRegion(int from, int to)","text":"<p>Deletes the text between <code>from</code> and <code>to</code> positions.</p>"},{"location":"API/script/textdocument.html#deleteselection","title":"deleteSelection()","text":"<p>Deletes the current selection, does nothing if no text is selected.</p>"},{"location":"API/script/textdocument.html#deletestartofline","title":"deleteStartOfLine()","text":"<p>Deletes from the cursor position to the start of the line.</p>"},{"location":"API/script/textdocument.html#deletestartofword","title":"deleteStartOfWord()","text":"<p>Deletes from the cursor position to the start of the word.</p>"},{"location":"API/script/textdocument.html#bool-findstring-text-int-options-textdocumentnofindflags","title":"bool find(string text, int options = TextDocument.NoFindFlags)","text":"<p>Searches the string <code>text</code> in the editor. Options could be a combination of:</p> <ul> <li><code>TextDocument.FindBackward</code>: search backward</li> <li><code>TextDocument.FindCaseSensitively</code>: match case</li> <li><code>TextDocument.FindWholeWords</code>: match only complete words</li> <li><code>TextDocument.FindRegexp</code>: use a regexp, equivalent to calling <code>findRegexp</code></li> </ul> <p>Selects the match and returns <code>true</code> if a match is found.</p>"},{"location":"API/script/textdocument.html#bool-findregexpstring-regexp-int-options-textdocumentnofindflags","title":"bool findRegexp(string regexp, int options = TextDocument.NoFindFlags)","text":"<p>Searches the string <code>regexp</code> in the editor using a regular expression. Options could be a combination of:</p> <ul> <li><code>TextDocument.FindBackward</code>: search backward</li> <li><code>TextDocument.FindCaseSensitively</code>: match case</li> <li><code>TextDocument.FindWholeWords</code>: match only complete words</li> </ul> <p>Selects the match and returns <code>true</code> if a match is found.</p>"},{"location":"API/script/textdocument.html#gotoendofdocument","title":"gotoEndOfDocument()","text":"<p>Goes to the document end.</p>"},{"location":"API/script/textdocument.html#gotoendofline","title":"gotoEndOfLine()","text":"<p>Goes to the end of the line.</p>"},{"location":"API/script/textdocument.html#gotoendofword","title":"gotoEndOfWord()","text":"<p>Goes to the end of the word under the cursor.</p>"},{"location":"API/script/textdocument.html#gotolineint-line-int-column-1","title":"gotoLine(int line, int column = 1)","text":"<p>Goes to the given <code>line</code> and <code>column</code> in the editor. Lines and columns are 1-based.</p>"},{"location":"API/script/textdocument.html#gotomarkmark-mark","title":"gotoMark(Mark mark)","text":"<p>Goes to the given <code>mark</code>.</p>"},{"location":"API/script/textdocument.html#gotonextcharint-count-1","title":"gotoNextChar(int count = 1)","text":"<p>Goes to the next character, repeat the operation <code>count</code> times.</p>"},{"location":"API/script/textdocument.html#gotonextlineint-count-1","title":"gotoNextLine(int count = 1)","text":"<p>Goes to the next line, repeat the operation <code>count</code> times.</p>"},{"location":"API/script/textdocument.html#gotonextwordint-count-1","title":"gotoNextWord(int count = 1)","text":"<p>Goes to the next word, repeat the operation <code>count</code> times.</p>"},{"location":"API/script/textdocument.html#gotopreviouscharint-count-1","title":"gotoPreviousChar(int count = 1)","text":"<p>Goes to the previous character, repeat the operation <code>count</code> times.</p>"},{"location":"API/script/textdocument.html#gotopreviouslineint-count-1","title":"gotoPreviousLine(int count = 1)","text":"<p>Goes to the previous line, repeat the operation <code>count</code> times.</p>"},{"location":"API/script/textdocument.html#gotopreviouswordint-count-1","title":"gotoPreviousWord(int count = 1)","text":"<p>Goes to the previous word, repeat the operation <code>count</code> times.</p>"},{"location":"API/script/textdocument.html#gotostartofdocument","title":"gotoStartOfDocument()","text":"<p>Goes to the document start.</p>"},{"location":"API/script/textdocument.html#gotostartofline","title":"gotoStartOfLine()","text":"<p>Goes to the start of the line.</p>"},{"location":"API/script/textdocument.html#gotostartofword","title":"gotoStartOfWord()","text":"<p>Goes to the start of the word under the cursor.</p>"},{"location":"API/script/textdocument.html#bool-hasselection","title":"bool hasSelection()","text":"<p>Returns true if the editor has a selection.</p>"},{"location":"API/script/textdocument.html#indentint-count","title":"indent(int count)","text":"<p>Indents the current line <code>count</code> times. If there's a selection, indent all lines in the selection.</p>"},{"location":"API/script/textdocument.html#indentationatpositionint-pos","title":"indentationAtPosition(int pos)","text":"<p>Returns the indentation at the given position.</p>"},{"location":"API/script/textdocument.html#insertstring-text","title":"insert(string text)","text":"<p>Inserts the string <code>text</code> at the current position. If some text is selected it will be replaced.</p>"},{"location":"API/script/textdocument.html#insertatlinestring-text-int-line-1","title":"insertAtLine(string text, int line = -1)","text":"<p>Inserts the string <code>text</code> at <code>line</code>. If <code>line</code> is -1, insert the text at the current position. <code>line</code> is 1-based.</p>"},{"location":"API/script/textdocument.html#insertatpositionstring-text-int-pos","title":"insertAtPosition(string text, int pos)","text":"<p>Inserts the string <code>text</code> at <code>pos</code>.</p>"},{"location":"API/script/textdocument.html#lineatpositionint-position","title":"lineAtPosition(int position)","text":"<p>Returns the line number for the given text cursor <code>position</code>. Or -1 if position is invalid</p>"},{"location":"API/script/textdocument.html#bool-matchstring-regexp-int-options-textdocumentnofindflags","title":"bool match(string regexp, int options = TextDocument.NoFindFlags)","text":"<p>Searches the string <code>regexp</code> in the editor using a regular expression. Options could be a combination of:</p> <ul> <li><code>TextDocument.FindBackward</code>: search backward</li> <li><code>TextDocument.FindCaseSensitively</code>: match case</li> <li><code>TextDocument.FindWholeWords</code>: match only complete words</li> </ul> <p>Selects the match and returns the named group if a match is found.</p>"},{"location":"API/script/textdocument.html#paste","title":"paste()","text":"<p>Pastes text in the clipboard.</p>"},{"location":"API/script/textdocument.html#positionatint-line-int-col","title":"positionAt(int line, int col)","text":"<p>Returns the text cursor position for the given <code>line</code> number and <code>column</code> number. Or -1 if position was not found</p>"},{"location":"API/script/textdocument.html#redoint-count","title":"redo(int count)","text":"<p>Redo <code>count</code> times the last actions.</p>"},{"location":"API/script/textdocument.html#removeint-length","title":"remove(int length)","text":"<p>Remove <code>length</code> character from the current position.</p>"},{"location":"API/script/textdocument.html#removeindentint-count","title":"removeIndent(int count)","text":"<p>Indents the current line <code>count</code> times. If there's a selection, indent all lines in the selection.</p>"},{"location":"API/script/textdocument.html#replaceint-length-string-text","title":"replace(int length, string text)","text":"<p>Replaces <code>length</code> characters from the current position with the string <code>text</code>.</p>"},{"location":"API/script/textdocument.html#replacetextrange-range-string-text","title":"replace(TextRange range, string text)","text":"<p>Replaces the text in the range <code>range</code> with the string <code>text</code>.</p>"},{"location":"API/script/textdocument.html#replaceint-from-int-to-string-text","title":"replace(int from, int to, string text)","text":"<p>Replaces the text from <code>from</code> to <code>to</code> with the string <code>text</code>.</p>"},{"location":"API/script/textdocument.html#bool-replaceallstring-before-string-after-int-options-textdocumentnofindflags","title":"bool replaceAll(string before, string after, int options = TextDocument.NoFindFlags)","text":"<p>Replaces all occurrences of the string <code>before</code> with <code>after</code>. Options could be a combination of:</p> <ul> <li><code>TextDocument.FindCaseSensitively</code>: match case</li> <li><code>TextDocument.FindWholeWords</code>: match only complete words</li> <li><code>TextDocument.FindRegexp</code>: use a regexp, equivalent to calling <code>findRegexp</code></li> <li><code>TextDocument.PreserveCase</code>: preserve case when replacing</li> </ul> <p>If the option <code>TextEditor.PreserveCase</code> is used, it means:</p> <ul> <li>All upper-case occurrences are replaced with the upper-case new text.</li> <li>All lower-case occurrences are replaced with the lower-case new text.</li> <li>Capitalized occurrences are replaced with the capitalized new text.</li> <li>Other occurrences are replaced with the new text as entered. If an occurrence and the new text have the same prefix or suffix, then the case of the prefix and/or suffix are preserved, and the other rules are applied on the rest of the occurrence only.</li> </ul> <p>Returns the number of changes done in the document.</p>"},{"location":"API/script/textdocument.html#bool-replaceallinrangestring-before-string-after-rangemark-range-int-options-textdocumentnofindflags","title":"bool replaceAllInRange(string before, string after, RangeMark range, int options = TextDocument.NoFindFlags)","text":"<p>Replaces all occurrences of the string <code>before</code> with <code>after</code> in the given <code>range</code>. See the options from <code>replaceAll</code>.</p> <p>Returns the number of changes done in the document.</p>"},{"location":"API/script/textdocument.html#bool-replaceallregexpstring-regexp-string-after-int-options-textdocumentnofindflags","title":"bool replaceAllRegexp(string regexp, string after, int options = TextDocument.NoFindFlags)","text":"<p>Replaces all occurrences of the matches for the <code>regexp</code> with <code>after</code>. See the options from <code>replaceAll</code>.</p> <p>The captures coming from the regexp can be used in the replacement text, using <code>\\1</code>..<code>\\n</code> or <code>$1</code>..<code>$n</code>.</p> <p>Returns the number of changes done in the document.</p>"},{"location":"API/script/textdocument.html#bool-replaceallregexpinrangestring-regexp-string-after-rangemark-range-int-options-textdocumentnofindflags","title":"bool replaceAllRegexpInRange(string regexp, string after, RangeMark range, int options = TextDocument.NoFindFlags)","text":"<p>Replaces all occurrences of the matches for the <code>regexp</code> with <code>after</code> in the given <code>range</code>. See the options from <code>replaceAll</code>.</p> <p>The captures coming from the regexp can be used in the replacement text, using <code>\\1</code>..<code>\\n</code> or <code>$1</code>..<code>$n</code>.</p> <p>Returns the number of changes done in the document.</p>"},{"location":"API/script/textdocument.html#bool-replaceonestring-before-string-after-int-options-textdocumentnofindflags","title":"bool replaceOne(string before, string after, int options = TextDocument.NoFindFlags)","text":"<p>Replaces one occurrence of the string <code>before</code> with <code>after</code>. Options could be a combination of:</p> <ul> <li><code>TextDocument.FindCaseSensitively</code>: match case</li> <li><code>TextDocument.FindWholeWords</code>: match only complete words</li> <li><code>TextDocument.FindRegexp</code>: use a regexp, equivalent to calling <code>findRegexp</code></li> <li><code>TextDocument.PreserveCase</code>: preserve case when replacing</li> </ul> <p>If the option <code>TextEditor.PreserveCase</code> is used, it means:</p> <ul> <li>All upper-case occurrences are replaced with the upper-case new text.</li> <li>All lower-case occurrences are replaced with the lower-case new text.</li> <li>Capitalized occurrences are replaced with the capitalized new text.</li> <li>Other occurrences are replaced with the new text as entered. If an occurrence and the new text have the same prefix or suffix, then the case of the prefix and/or suffix are preserved, and the other rules are applied on the rest of the occurrence only.</li> </ul> <p>Returns true if a change occurs in the document..</p>"},{"location":"API/script/textdocument.html#selectall","title":"selectAll()","text":"<p>Selects all the text.</p>"},{"location":"API/script/textdocument.html#selectendofline","title":"selectEndOfLine()","text":"<p>Selects the text from the current position to the end of the line.</p>"},{"location":"API/script/textdocument.html#selectendofword","title":"selectEndOfWord()","text":"<p>Selects the text from the current position to the end of the word.</p>"},{"location":"API/script/textdocument.html#selectnextcharint-count-1","title":"selectNextChar(int count = 1)","text":"<p>Selects the next character, repeat the operation <code>count</code> times.</p>"},{"location":"API/script/textdocument.html#selectnextlineint-count-1","title":"selectNextLine(int count = 1)","text":"<p>Selects the next line, repeat the operation <code>count</code> times.</p>"},{"location":"API/script/textdocument.html#selectnextwordint-count-1","title":"selectNextWord(int count = 1)","text":"<p>Selects the next word, repeat the operation <code>count</code> times.</p>"},{"location":"API/script/textdocument.html#selectpreviouscharint-count-1","title":"selectPreviousChar(int count = 1)","text":"<p>Selects the previous character, repeat the operation <code>count</code> times.</p>"},{"location":"API/script/textdocument.html#selectpreviouslineint-count-1","title":"selectPreviousLine(int count = 1)","text":"<p>Selects the previous line, repeat the operation <code>count</code> times.</p>"},{"location":"API/script/textdocument.html#selectpreviouswordint-count-1","title":"selectPreviousWord(int count = 1)","text":"<p>Selects the previous word, repeat the operation <code>count</code> times.</p>"},{"location":"API/script/textdocument.html#selectrangetextrange-range","title":"selectRange(TextRange range)","text":"<p>Selects the range passed in parameter.</p>"},{"location":"API/script/textdocument.html#selectrangemarkrangemark-mark","title":"selectRangeMark(RangeMark mark)","text":"<p>Selects the text defined by the range make <code>mark</code>.</p>"},{"location":"API/script/textdocument.html#selectregionint-from-int-to","title":"selectRegion(int from, int to)","text":"<p>Selects the text between <code>from</code> and <code>to</code> positions.</p>"},{"location":"API/script/textdocument.html#selectstartoflineint-count-1","title":"selectStartOfLine(int count = 1)","text":"<p>Selects the text from the current position to the start of the line.</p>"},{"location":"API/script/textdocument.html#selectstartofword","title":"selectStartOfWord()","text":"<p>Selects the text from the current position to the start of the word.</p>"},{"location":"API/script/textdocument.html#selecttoint-pos","title":"selectTo(int pos)","text":"<p>Selects the text from the current position to <code>pos</code>.</p>"},{"location":"API/script/textdocument.html#selecttomarkmark-mark","title":"selectToMark(Mark mark)","text":"<p>Selects the text from the cursor position to the <code>mark</code>.</p>"},{"location":"API/script/textdocument.html#undoint-count","title":"undo(int count)","text":"<p>Undo <code>count</code> times the last actions.</p>"},{"location":"API/script/textdocument.html#unselect","title":"unselect()","text":"<p>Clears the current selection.</p>"},{"location":"API/script/textlocation.html","title":"TextLocation","text":"<p>Defines a range of text in a file. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/textlocation.html#properties","title":"Properties","text":"Name CodeDocument document TextRange range"},{"location":"API/script/textlocation.html#detailed-description","title":"Detailed Description","text":"<p>A mark is always created by a CodeDocument.</p>"},{"location":"API/script/textlocation.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/textlocation.html#codedocument-document","title":"CodeDocument document","text":"<p>This read-only property contains the source document for this text location.</p>"},{"location":"API/script/textlocation.html#textrange-range","title":"TextRange range","text":"<p>This read-only property contains the range of text in the document.</p>"},{"location":"API/script/textrange.html","title":"TextRange","text":"<p>Defines a range of text in a text document More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/textrange.html#properties","title":"Properties","text":"Name int end int length int start"},{"location":"API/script/textrange.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/textrange.html#int-end","title":"int end","text":"<p>This read-only property defines the end position of the range.</p>"},{"location":"API/script/textrange.html#int-length","title":"int length","text":"<p>This read-only property returns the length of the range (end - start)</p>"},{"location":"API/script/textrange.html#int-start","title":"int start","text":"<p>This read-only property defines the start position of the range.</p>"},{"location":"API/script/toolbar.html","title":"ToolBar","text":"<p>Description of a RC file toolbar. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/toolbar.html#properties","title":"Properties","text":"Name array&lt;string&gt; actionIds array&lt;ToolBarItem&gt; children size iconSize string id"},{"location":"API/script/toolbar.html#methods","title":"Methods","text":"Name bool contains(string id)"},{"location":"API/script/toolbar.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/toolbar.html#arraystring-actionids","title":"array&lt;string&gt; actionIds","text":"<p>This property holds all action ids used in the toolbar.</p>"},{"location":"API/script/toolbar.html#arraytoolbaritem-children","title":"array&lt;ToolBarItem&gt; children","text":"<p>This property holds the list of toolbar items inside in the toolbar.</p>"},{"location":"API/script/toolbar.html#size-iconsize","title":"size iconSize","text":"<p>This property holds the size of the icon associated to the toolbar.</p>"},{"location":"API/script/toolbar.html#string-id","title":"string id","text":"<p>This property holds the id of the toolbar.</p>"},{"location":"API/script/toolbar.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/toolbar.html#bool-containsstring-id","title":"bool contains(string id)","text":"<p>Returns true if the toolbar contains the given <code>id</code></p>"},{"location":"API/script/toolbaritem.html","title":"ToolBarItem","text":"<p>Description of a RC file toolbar item. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/toolbaritem.html#properties","title":"Properties","text":"Name string id bool isSeparator"},{"location":"API/script/toolbaritem.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/toolbaritem.html#string-id","title":"string id","text":"<p>This property holds the id of the toolbar item.</p>"},{"location":"API/script/toolbaritem.html#bool-isseparator","title":"bool isSeparator","text":"<p>This property returns <code>true</code> if the toolbar item is a separator (vertical line visually).</p>"},{"location":"API/script/userdialog.html","title":"UserDialog","text":"<p>Singleton with methods to display common dialog to the user. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/userdialog.html#methods","title":"Methods","text":"Name critical(string title, string text) double getDouble(string title, string label, real value = 0.0, int decimals = 1, real step = 1.0, real min = -2147483647.0, real max = 2147483647.0) string getExistingDirectory(string caption, string dir = \"\") int getInt(string title, string label, int value = 0, int step = 1, int min = -2147483647, int max = 2147483647) string getItem(string title, string label, array&lt;string&gt; items, int current = 0, bool editable = false) string getOpenFileName(string caption, string dir = \"\", string filters = \"\") string getSaveFileName(string caption, string dir = \"\", string filters = \"\") string getText(string title, string label, string text = \"\") information(string title, string text) warning(string title, string text)"},{"location":"API/script/userdialog.html#detailed-description","title":"Detailed Description","text":"<p>The <code>UserDialog</code> singleton provides methods to display common dialog that could be used in scripts. If the user cancel the dialog, it will return a null value you can test directly:</p> <pre><code>let s = UserDialog.getText(\"Get text\", \"Value\")\nif (s !== null)\n    Message.log(\"Text: \" + s)\nelse\n    Message.log(\"Cancelled\")\n</code></pre>"},{"location":"API/script/userdialog.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/userdialog.html#criticalstring-title-string-text","title":"critical(string title, string text)","text":"<p>Show a critical dialog.</p>"},{"location":"API/script/userdialog.html#double-getdoublestring-title-string-label-real-value-00-int-decimals-1-real-step-10-real-min-21474836470-real-max-21474836470","title":"double getDouble(string title, string label, real value = 0.0, int decimals = 1, real step = 1.0, real min = -2147483647.0, real max = 2147483647.0)","text":"<p>Returns a double entered by the user. Returns <code>null</code> if the user cancel.</p> <p>The dialog's caption is set to <code>title</code>, the <code>label</code> is displayed and the initial value is <code>value</code>. The dialog will show <code>decimals</code> number of decimals. <code>min</code> and <code>max</code> are the minimum and maximum values the user may choose. <code>step</code> is the amount by which the values change when incrementing or decrementing the value.</p>"},{"location":"API/script/userdialog.html#string-getexistingdirectorystring-caption-string-dir","title":"string getExistingDirectory(string caption, string dir = \"\")","text":"<p>Returns an existing directory selected by the user. Returns <code>null</code> if the user cancel.</p> <p>The dialog's caption is set to <code>caption</code>, the initial directory set to <code>dir</code>.</p>"},{"location":"API/script/userdialog.html#int-getintstring-title-string-label-int-value-0-int-step-1-int-min-2147483647-int-max-2147483647","title":"int getInt(string title, string label, int value = 0, int step = 1, int min = -2147483647, int max = 2147483647)","text":"<p>Returns an integer entered by the user. Returns <code>null</code> if the user cancel.</p> <p>The dialog's caption is set to <code>title</code>, the <code>label</code> is displayed and the initial value is <code>value</code>. <code>min</code> and <code>max</code> are the minimum and maximum values the user may choose. <code>step</code> is the amount by which the values change when incrementing or decrementing the value.</p>"},{"location":"API/script/userdialog.html#string-getitemstring-title-string-label-arraystring-items-int-current-0-bool-editable-false","title":"string getItem(string title, string label, array&lt;string&gt; items, int current = 0, bool editable = false)","text":"<p>Returns a string selected among a pre-defined list. Returns <code>null</code> if the user cancel.</p> <p>The dialog's caption is set to <code>title</code>, the <code>label</code> is displayed and <code>items</code> contain the initial list of values. The value <code>current</code> is selected at the start, and if <code>editable</code> is true, the user will be able to enter his own value.</p>"},{"location":"API/script/userdialog.html#string-getopenfilenamestring-caption-string-dir-string-filters","title":"string getOpenFileName(string caption, string dir = \"\", string filters = \"\")","text":"<p>Returns an existing file selected by the user. Returns <code>null</code> if the user cancel.</p> <p>The dialog's caption is set to <code>caption</code>, the initial directory set to <code>dir</code> and only files that matches the given <code>filters</code> are shown.</p>"},{"location":"API/script/userdialog.html#string-getsavefilenamestring-caption-string-dir-string-filters","title":"string getSaveFileName(string caption, string dir = \"\", string filters = \"\")","text":"<p>Returns a file name selected by the user. Returns <code>null</code> if the user cancel.</p> <p>The dialog's caption is set to <code>caption</code>, the initial directory set to <code>dir</code> and only files that matches the given <code>filters</code> are shown.</p>"},{"location":"API/script/userdialog.html#string-gettextstring-title-string-label-string-text","title":"string getText(string title, string label, string text = \"\")","text":"<p>Returns a string entered by the user. Returns <code>null</code> if the user cancel.</p> <p>The dialog's caption is set to <code>title</code>, the <code>label</code> is displayed and the initial value is <code>text</code>.</p>"},{"location":"API/script/userdialog.html#informationstring-title-string-text","title":"information(string title, string text)","text":"<p>Show an information dialog.</p>"},{"location":"API/script/userdialog.html#warningstring-title-string-text","title":"warning(string title, string text)","text":"<p>Show a warning dialog.</p>"},{"location":"API/script/utils.html","title":"Utils","text":"<p>Singleton with utility methods. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/utils.html#methods","title":"Methods","text":"Name addScriptPath(string path, bool projectOnly) string convertCase(string str, Case from, Case to) string copyToClipboard(string text) string cppKeywords() string cppPrimitiveTypes() string getEnv(string varName) string getGlobal(string varName) string mktemp(string pattern) runScript(string path, bool log) setGlobal(string varName, string value) sleep(int msecs)"},{"location":"API/script/utils.html#detailed-description","title":"Detailed Description","text":"<p>The <code>Utils</code> singleton implements some utility methods useful for scripts.</p>"},{"location":"API/script/utils.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script/utils.html#addscriptpathstring-path-bool-projectonly","title":"addScriptPath(string path, bool projectOnly)","text":"<p>Adds the script directory <code>path</code> from another script.</p> <p>Could be useful to load multiple paths at once, by creating a init.js file like this:</p> <pre><code>function main() {\n    Utils.addScriptPath(Dir.currentScriptPath() + \"/message\")\n    Utils.addScriptPath(Dir.currentScriptPath() + \"/texteditor\")\n    Utils.addScriptPath(Dir.currentScriptPath() + \"/dialog\")\n    Utils.addScriptPath(Dir.currentScriptPath() + \"/cppeditor\")\n}\n</code></pre>"},{"location":"API/script/utils.html#string-convertcasestring-str-case-from-case-to","title":"string convertCase(string str, Case from, Case to)","text":"<p>Converts and returns the string <code>str</code> with a different case pattern: from <code>from</code> to <code>to</code>.</p> <p>The different cases are:</p> <ul> <li><code>Utils.CamelCase</code>: \"toCamelCase\",</li> <li><code>Utils.PascalCase</code>: \"ToPascalCase\",</li> <li><code>Utils.SnakeCase</code>: \"to_snake_case\",</li> <li><code>Utils.UpperCase</code>: \"TO_UPPER_CASE\",</li> <li><code>Utils.KebabCase</code>: \"to-kebab-case\",</li> <li><code>Utils.TitleCase</code>: \"To Title Case\".</li> </ul>"},{"location":"API/script/utils.html#string-copytoclipboardstring-text","title":"string copyToClipboard(string text)","text":"<p>Copy the text to the clipboard</p>"},{"location":"API/script/utils.html#string-cppkeywords","title":"string cppKeywords()","text":"<p>Returns a list of cpp keywords.</p>"},{"location":"API/script/utils.html#string-cppprimitivetypes","title":"string cppPrimitiveTypes()","text":"<p>Returns a list of cpp primitive types</p>"},{"location":"API/script/utils.html#string-getenvstring-varname","title":"string getEnv(string varName)","text":"<p>Returns the value of the environment variable <code>varName</code>.</p>"},{"location":"API/script/utils.html#string-getglobalstring-varname","title":"string getGlobal(string varName)","text":"<p>Returns the value of the global <code>varName</code>. A global value is a value set by a script, and persistent only in the current knut execution (it will disappear once closed).</p> <p>For persistent settings, see Settings.</p>"},{"location":"API/script/utils.html#string-mktempstring-pattern","title":"string mktemp(string pattern)","text":"<p>Creates and returns the name of a temporary file based on a <code>pattern</code>.</p>"},{"location":"API/script/utils.html#runscriptstring-path-bool-log","title":"runScript(string path, bool log)","text":"<p>Runs the script given by <code>path</code>. If <code>log</code> is true, it will also log the run of the script.</p>"},{"location":"API/script/utils.html#setglobalstring-varname-string-value","title":"setGlobal(string varName, string value)","text":"<p>Sets the global value <code>varName</code> to <code>value</code>. A global value is a value set by a script, and persistent only in the current Knut execution (it will disappear once closed).</p> <p>For persistent settings, see Settings.</p>"},{"location":"API/script/utils.html#sleepint-msecs","title":"sleep(int msecs)","text":"<p>Sleeps for <code>msecs</code> milliseconds.</p>"},{"location":"API/script/widget.html","title":"Widget","text":"<p>Description of a RC file widget. More...</p> <pre><code>import Script\n</code></pre>"},{"location":"API/script/widget.html#properties","title":"Properties","text":"Name array&lt;Widget&gt; children string className rect geometry string id object properties"},{"location":"API/script/widget.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script/widget.html#arraywidget-children","title":"array&lt;Widget&gt; children","text":"<p>This property holds the list of children of the current widget.</p>"},{"location":"API/script/widget.html#string-classname","title":"string className","text":"<p>This property holds the Qt class name equivalent of the widget.</p>"},{"location":"API/script/widget.html#rect-geometry","title":"rect geometry","text":"<p>This property holds the geometry of the widget.</p> <p>The geometry is in dialog system, different from pixel size. Usually, you need to apply a scale of 1.5 x 1.65 to get the pixel size, but it could change depending on the project.</p>"},{"location":"API/script/widget.html#string-id","title":"string id","text":"<p>This property holds the id of the widget.</p>"},{"location":"API/script/widget.html#object-properties","title":"object properties","text":"<p>This property holds the list of Qt properties for the widget.</p>"},{"location":"API/script.test/testcase.html","title":"TestCase","text":"<p>Provides a way to create unit tests as script. More...</p> <pre><code>import Script.Test\n</code></pre>"},{"location":"API/script.test/testcase.html#properties","title":"Properties","text":"Name string name"},{"location":"API/script.test/testcase.html#methods","title":"Methods","text":"Name compare(actual, expected, msg) verify(value, msg)"},{"location":"API/script.test/testcase.html#detailed-description","title":"Detailed Description","text":"<p>Run unit tests as a script, and returns the number of failed tests.</p>"},{"location":"API/script.test/testcase.html#property-documentation","title":"Property Documentation","text":""},{"location":"API/script.test/testcase.html#string-name","title":"string name","text":"<p>This property defines the name of the unit test. This is a mandatory property.</p>"},{"location":"API/script.test/testcase.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script.test/testcase.html#compareactual-expected-msg","title":"compare(actual, expected, msg)","text":"<p>Compares <code>actual</code> vs <code>expected</code>, and display the <code>msg</code> if it's not the same.</p>"},{"location":"API/script.test/testcase.html#verifyvalue-msg","title":"verify(value, msg)","text":"<p>Verifies that <code>value</code> is true, and display the <code>msg</code> if it's not.</p>"},{"location":"API/script.test/testutil.html","title":"TestUtil","text":"<p>Provides utility methods useful for testing. More...</p> <pre><code>import Script.Test\n</code></pre>"},{"location":"API/script.test/testutil.html#methods","title":"Methods","text":"Name compareDirectories(string current, string expected) compareFiles(string file, string expected, bool eolLF = true) createTestProjectFrom(string path) removeTestProject(string path)"},{"location":"API/script.test/testutil.html#detailed-description","title":"Detailed Description","text":"<p>This class is mainly used by the TestCase object, to extract some information on the script.</p> <p>It should not be used in normal scripts.</p>"},{"location":"API/script.test/testutil.html#method-documentation","title":"Method Documentation","text":""},{"location":"API/script.test/testutil.html#comparedirectoriesstring-current-string-expected","title":"compareDirectories(string current, string expected)","text":"<p>Compares the two directories recursively, and return true if they are the same.</p>"},{"location":"API/script.test/testutil.html#comparefilesstring-file-string-expected-bool-eollf-true","title":"compareFiles(string file, string expected, bool eolLF = true)","text":"<p>Compares the content of the two files, and return true if they are the same. If <code>eolLF</code> true, compareFiles will change the EOL of files to LF for comparison.</p>"},{"location":"API/script.test/testutil.html#createtestprojectfromstring-path","title":"createTestProjectFrom(string path)","text":"<p>Creates a new recursive copy of the directory at <code>path</code> with the name <code>path</code>_test_data. Returns the newly created directory path.</p>"},{"location":"API/script.test/testutil.html#removetestprojectstring-path","title":"removeTestProject(string path)","text":"<p>Removes the <code>path</code> from the disk.</p>"},{"location":"contributing/architecture.html","title":"Architecture","text":"<p>High-level architecture description.</p>"},{"location":"contributing/architecture.html#modules","title":"Modules","text":"<ul> <li>treesitter: Tree-sitter C++ wrapper<ul> <li>Wraps C interface into C++ classes</li> <li>Improved memory-safety by use of smart pointers</li> <li>High-Level user access through <code>QueryMatch</code> implemented in core</li> </ul> </li> <li>lsp: LSP client library<ul> <li>Complete LSP protocole definition</li> <li>Client class to handle some of the messages</li> <li>Use <code>clangd</code> for C/C++</li> </ul> </li> <li>rccore: rc files parser and converter<ul> <li>Conversion to ui files</li> <li>\u26a0\ufe0f Not everything is parsed</li> </ul> </li> <li>rcui: widgets for viewing a rcfile</li> <li>core: script engine and all script objects<ul> <li>The engine is based on QML</li> <li>Manage project and documents</li> </ul> </li> <li>gui: ui on top of the core<ul> <li>IDE-like</li> <li>All dialogs available from command line</li> </ul> </li> <li>knut: the application itself, just a <code>main.cpp</code> file</li> </ul>"},{"location":"contributing/architecture.html#details","title":"Details","text":""},{"location":"contributing/architecture.html#startup","title":"Startup","text":"<p><code>KnutCore</code> is the central object in the application (module core), and is created in the <code>main.cpp</code>:</p> <ul> <li>create the application singletons: <code>Project</code>, <code>Settings</code> and <code>ScriptManager</code></li> <li>read parameters from the command line</li> </ul> <p><code>KnutMain</code> is a subclass (module gui) that adds the gui specific parameters.</p>"},{"location":"contributing/architecture.html#project","title":"Project","text":"<p>The <code>Project</code> class is the root of everything, as it's the class used to create all documents. Then each document has a specific API to work with the type of document (for example, a CppDocument has a <code>switchDeclarationDefinition()</code> method).</p> <p></p> <p>All objects exported must be declared inside the <code>ScriptRunner</code> class constructor. This class, as the name suggest, is used to run the scripts. Also make sure to add the object properties at the end of the constructor, for example: <pre><code>addProperties&lt;CppDocument&gt;(m_properties);\n</code></pre> This will store all property's names for this object, and is used when recording a script from the ui, to make a difference between a property call and a method call.</p>"},{"location":"contributing/architecture.html#tree-sitter","title":"Tree-sitter","text":"<p>Tree-sitter is used by knut to parse code and extract many higher-level structures (currently only C++).</p> <p>In the Knut GUI, use the <code>C++</code>&gt;<code>Tree-sitter Inspector</code> widget to explore the current Tree-sitter state.</p> <p>Note</p> <p>Tree-sitter capabilities are implemented on the CodeDocument class. Most code-specific scripting functions implemented by Knut are based on Tree-sitter and we expect Tree-sitter bindings to be available for almost any language.</p>"},{"location":"contributing/architecture.html#lsp-server","title":"LSP server","text":"<p>Warning</p> <p>For now, knut has only been tested with clangd LSP server, and require at least version 13.0.</p> <p>When using a LSP server, different log files are created (next to the knut executable):</p> <ul> <li>extension_messages.log: contains all the different json messages exchanged between the client and the server</li> <li>extension_server.log: all the logs coming from the server</li> </ul> <p>extension being the extension used for the language, typically <code>cpp</code> for C++ files.</p> <p>The first one can be loaded directly in this online lsp-viewer.</p>"},{"location":"contributing/getting-involved.html","title":"Getting involved","text":""},{"location":"contributing/getting-involved.html#contributions","title":"Contributions","text":"<p>Please submit your contributions or issue reports from our GitHub space at https://github.com/KDAB/Knut</p>"},{"location":"contributing/getting-involved.html#compilation","title":"Compilation","text":"<p>To compile Knut, you need:</p> <ul> <li>a C++20 compiler (recent compilers should work)</li> <li>Qt 6.2 at least</li> </ul> <p>All 3rd-party dependencies are set up as git submodules, make sure to run:</p> <pre><code>git submodule update --init --recursive\n</code></pre>"},{"location":"contributing/getting-involved.html#qt-creator-compilation-error-on-windows","title":"Qt Creator compilation error on Windows","text":"<p>On Windows, if you use Qt Creator, you will have a compilation error like that:</p> <pre><code>[140/402 21.9/sec] Update documentation\nFAILED: CMakeFiles/docs C:/dev/knut/knut/build-debug/CMakeFiles/docs\ncmd.exe /C \"cd /D C:\\dev\\knut\\knut\\build-debug &amp;&amp; C:\\dev\\knut\\knut\\build-debug\\bin\\cpp2doc.exe\"\n</code></pre> <p>This is due to a bug in Qt Creator: QTCREATORBUG-29936.</p>"},{"location":"contributing/getting-involved.html#code-contributions","title":"Code contributions","text":"<p>In order to contribute code, make sure to read the following paragraphs.</p>"},{"location":"contributing/getting-involved.html#pre-commit","title":"pre-commit","text":"<p>Make sure to install the pre-commit hooks. Those are installed using <code>pre-commit</code>:</p> <pre><code>pip install pre-commit\npre-commit install --hook-type commit-msg\n</code></pre> <p>At your first commit, it will download a bunch of necessary files, then all checks will be done at every commit, before hitting the CI.</p> <p>Code formatting is handled as part of the pre-commit checks using <code>clang-format</code>.</p>"},{"location":"contributing/getting-involved.html#includes-order","title":"Includes order","text":"<p>Includes order follow this simple rule:</p> <pre><code>// All Knut includes, without any empty lines, using \"\"\n\n// All external includes, without empty lines, using &lt;&gt;\n</code></pre> <p>For example:</p> <pre><code>#include \"codedocument.h\"\n#include \"astnode.h\"\n#include \"treesitter/predicates.h\"\n#include \"utils/string_helper.h\"\n\n#include &lt;QFile&gt;\n#include &lt;QTextStream&gt;\n#include &lt;algorithm&gt;\n#include &lt;kdalgorithms.h&gt;\n#include &lt;memory&gt;\n</code></pre> <p>Includes are automatically sorted by <code>clang-format</code>, don't worry about that.</p>"},{"location":"contributing/getting-involved.html#documentation","title":"Documentation","text":"<p>Knut is using <code>mkdocs</code> for generating its documentation. Make sure to properly document all new API you add to Knut. During compilation, the internal tool <code>cpp2doc</code> will update automatically the documentation for the classes you updated.</p> <p>For full documentation visit mkdocs.org.</p>"},{"location":"contributing/getting-involved.html#installation","title":"Installation","text":"<pre><code>pip install mkdocs\npip install mkdocs-material\npip install mkdocs-build-plantuml-plugin\n</code></pre>"},{"location":"contributing/getting-involved.html#commands","title":"Commands","text":"<ul> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"contributing/unit-tests.html","title":"Unit tests","text":"<p>There are 2 different kinds of unit-tests: C++ and script. THey are located in the <code>tests</code> directory, with all test data in the <code>test_data</code> directory.</p>"},{"location":"contributing/unit-tests.html#c-unit-tests","title":"C++ unit-tests","text":"<p>Tests written using the QtTest module.</p>"},{"location":"contributing/unit-tests.html#utility-classes","title":"Utility classes","text":"<p>There are some utility classes you can use:</p> <ul> <li><code>Test::testDataPath()</code>: returns the test data folder path</li> <li><code>Test::FileTester</code>: create an original file based on the original one, and compare the result with an expected one</li> </ul> <pre><code>Test::FileTester file(Test::testDataPath() + \"/textdocument/foo_original.txt\");\nCore::TextDocument document;\ndocument.load(file.fileName());\n// do something with the document\nQVERIFY(file.compare());\n</code></pre> <p>To use it, include `\"common/test_utils.h\".</p> <p>If you use the <code>FileTester</code> with LSP, make sure to close the LSP server (the <code>KnutCore</code> object must be destroyed for that):</p> <pre><code>Test::FileTester file(Test::testDataPath() + \"/cpp-project/section_original.cpp\");\n{\n    Core::KnutCore core;\n    auto project = Core::Project::instance();\n    //...\n} // the core is destroyed before the FileTester\n</code></pre>"},{"location":"contributing/unit-tests.html#enabling-or-disabling-tests","title":"Enabling or disabling tests","text":"<p>Some tests can't be run without <code>clangd</code> or with a version of <code>clangd</code> older than 13.0. In this case, you can add some macro at the beginning of the tests:</p> <ul> <li><code>CHECK_CLANGD</code> to skip the test if there are no <code>clangd</code></li> <li><code>CHECK_CLANGD_VERSION</code> to skip the test if there are no <code>clangd</code> or an obsolete one</li> </ul>"},{"location":"contributing/unit-tests.html#qml-unit-tests","title":"QML Unit-tests","text":"<p>Tests written using a QML scripts, they are launched by the <code>tst_knut.cpp</code> file:</p> <pre><code>KNUT_TEST(settings)\nKNUT_TEST(dir)\n...\n</code></pre> <p>Each line will run a file from the <code>test_data</code> directory, for example the first one is looking for a <code>tst_settings.qml</code> file.</p> <p>A QML test is using the module <code>Script.Test</code> and the item <code>TestCase</code>. Each function will be called automatically and returns true or false, depending of the test results.</p> <pre><code>import Script\nimport Script.Test\n\nTestCase {\n    name: \"FileInfo\"\n\n    function endsWith(str,pattern) {\n        return str.substr(str.length-pattern.length,pattern.length) === pattern\n    }\n\n    function startsWith(str,pattern) {\n        return str.substr(0,pattern.length) === pattern\n    }\n    //...\n}\n</code></pre>"},{"location":"getting-started/cli.html","title":"Command Line Interface","text":""},{"location":"getting-started/cli.html#using-command-line-options","title":"Using command line options","text":"<p>You can start knut by passing directly some options to the command line, using it in a headless way: <pre><code>knut [option] [project]\n</code></pre></p> <p>The <code>project</code> is the directory containing the source code you want to work on. All available options are documented here:</p> Options Description -r, --run <code>&lt;file&gt;</code> Runs given script <code>&lt;file&gt;</code> then exit -t, --test <code>&lt;file&gt;</code> Tests given script <code>&lt;file&gt;</code> then exit -i, --input <code>&lt;file&gt;</code> Opens document <code>&lt;file&gt;</code> on startup -l, --line <code>&lt;line&gt;</code> Sets the line in the current file, if any -c, --column <code>&lt;column&gt;</code> Sets the column in the current file, if any --gui-run Opens the run script dialog --gui-settings Opens the settings dialog --json-list Returns the list of all available scripts as a JSON file --json-settings Returns the settings as a JSON file <p>Note: the json options are mainly used for integration with 3rd party, not meant to be used by user directly.</p> <p>Without any options, knut will start the user interface.</p>"},{"location":"getting-started/cli.html#ide-integration","title":"IDE integration","text":"<p>Using the command line interface, one can integrate with existing IDE.</p>"},{"location":"getting-started/cli.html#qt-creator","title":"Qt Creator","text":"<p>To add knut to Qt Creator, go to the menu <code>Tools</code>&gt;<code>External</code>&gt;<code>Configure...</code>, create a new tool, and fill the different fields for a new tool.</p> <p></p> <p>Particularly:</p> <ul> <li>in Arguments, you can use different variables, like:<ul> <li><code>--root %{ActiveProject:NativePath}</code></li> <li><code>--input %{CurrentDocument:FilePath}</code></li> <li><code>--line %{CurrentDocument:Row}</code></li> <li><code>--column %{CurrentDocument:Column}</code></li> </ul> </li> <li>in Working directory: <code>%{ActiveProject:NativePath}</code></li> </ul> <p>For example, to open the knut user interface using the same project and same file as Qt Creator, you will pass in Arguments: <pre><code>--input %{CurrentDocument:FilePath} --line %{CurrentDocument:Row} --column %{CurrentDocument:Column} %{ActiveProject:NativePath}\n</code></pre></p>"},{"location":"getting-started/gui.html","title":"User Interface","text":""},{"location":"getting-started/gui.html#overview","title":"Overview","text":"<p>The knut user interface is not an IDE, but rather a way to do some manual or automated transformation of the code.</p> <p>Options are available via the <code>File</code>&gt;<code>Options...</code> (or <code>Ctrl+,</code>), and allows you to change the look of the application, as well as some settings (see Overview).</p> <p></p> <p>Beyond the central part, which is used to display the current document, you have 4 panels:</p> <ol> <li>Project panel: files in the current project</li> <li>Script panel: open/edit/run a script</li> <li>Log output: display the logs from the application, you can change the level</li> <li>History panel: history of all user actions, can be used to create a script</li> </ol>"},{"location":"getting-started/gui.html#palette","title":"Palette","text":"<p>Like other existing editors, knut has a palette available using the <code>File</code>&gt;<code>Show Palette...</code> (or <code>Ctrl+P</code>).</p> <p></p> <p>The palette allows you to: - open a file from the project - go to a line in the current document (<code>:</code> prefix) - go to a specific symbol in the current document (<code>@</code> prefix) - run a script (<code>.</code> prefix)</p>"},{"location":"getting-started/gui.html#prototyping-a-script","title":"Prototyping a script","text":"<p>Knut user interface allows you to prototype and experiment scripts easily. There are 2 different ways to do that.</p>"},{"location":"getting-started/gui.html#record-a-script","title":"Record a script","text":"<p>You can record and play a script using the <code>Script</code>&gt;<code>Record Script</code> (or <code>Alt+[</code>), and stop it once done with <code>Script</code>&gt;<code>Stop Recording Script</code> (or <code>Alt+]</code>).</p> <p></p> <p>The script will be available in the Script Panel, and you can run it directly (play button, <code>Script</code>&gt;<code>Play Last Script</code> or <code>Alt+R</code>). You can also copy it, edit it or save it directly.</p> <p>The script created is using a javascript script, but the lines can freely be copied into a QML script if needed.</p>"},{"location":"getting-started/gui.html#use-history","title":"Use history","text":"<p>You can also create a script directly from the History Panel: select the lines of the history you want to use, right-click and select the <code>Create Script</code> menu.</p> <p></p> <p>The script will be available in the Script Panel, like previously.</p>"},{"location":"getting-started/overview.html","title":"Overview","text":""},{"location":"getting-started/overview.html#general-overview","title":"General overview","text":"<p>Knut allows to automate some code modifications on a codebase. This allows applying some modification on multiple files at once, for example the source and header files in a C++ project.</p> <p>When running knut, the first thing is to open a project, a project being just the root directory for the codebase. Once a project is open, knut can open one or multiple files inside the project, and run transformations on those files. Transformations are defined in script files (see writing scripts).</p> <p>Each file open provides different API usable by the scripts, depending on the type of file:</p> <ul> <li>a text file has find/replace/navigation APIs (and more...)</li> <li>a C++ file adds block navigation, switch header/source or declaration/definition...</li> <li>a ui file has API to change the object name or class of items</li> <li>...</li> </ul> <p></p>"},{"location":"getting-started/overview.html#running-a-script","title":"Running a script","text":""},{"location":"getting-started/overview.html#setup","title":"Setup","text":"<p>To run scripts you need to set it up accordingly:</p> <ul> <li>start the knut user interface and go to <code>File</code>&gt;<code>Options...</code></li> <li>or start directly the settings dialog via the command line: <code>knut</code> --gui-setting`</li> </ul> <p>This will display a dialog with the script knut general settings. </p> <p>You need at least one script directory.</p>"},{"location":"getting-started/overview.html#running","title":"Running","text":"<p>Once done, you can run any scripts:</p> <ul> <li>from the command line:</li> </ul> <p><pre><code>knut --run &lt;path-to-script&gt;\n</code></pre> - from the user interface, using the <code>Script</code>&gt;<code>Run Script...</code> menu</p>"},{"location":"getting-started/overview.html#settings","title":"Settings","text":"<p>Knut has 3 levels of settings:</p> <ul> <li>internal settings (can't be changed by the user)</li> <li>user settings: stored in <code>&lt;user home&gt;/knut.json</code></li> <li>project settings: stored in <code>&lt;project home&gt;/knut.json</code></li> </ul> <p>Settings can be overridden, project settings have priority over user settings over internal settings. When a project is loaded, settings are saved in the project settings, otherwise in the user settings. Script paths are merged between the user and project settings, allowing for some general scripts, and project-specific scripts.</p> <p>Some settings (like Text Editor Behavior) are only per project.</p>"},{"location":"getting-started/overview.html#internal-settings","title":"Internal settings","text":"<pre><code>{\n    \"lsp\" : [\n        {\n            \"type\": \"cpp_type\",\n            \"program\": \"clangd\",\n            \"arguments\": []\n        }\n    ],\n    \"rc\": {\n        \"dialog_flags\": [\"UpdateGeometry\", \"UseIdForPixmap\"],\n        \"dialog_scalex\": 1.5,\n        \"dialog_scaley\": 1.65,\n        \"asset_flags\": [\"RemoveUnknown\", \"SplitToolBar\", \"ConvertToPng\"],\n        \"asset_transparent_colors\": [\"Gray\", \"Magenta\", \"BottomLeftPixel\"]\n    },\n    \"mime_types\": {\n        \"c\": \"cpp_type\",\n        \"cpp\": \"cpp_type\",\n        \"cxx\": \"cpp_type\",\n        \"h\": \"cpp_type\",\n        \"hpp\": \"cpp_type\",\n        \"txt\": \"text_type\",\n        \"json\": \"text_type\",\n        \"rc\": \"rc_type\",\n        \"rc2\": \"rc_type\",\n        \"ui\": \"qtui_type\",\n        \"png\": \"image_type\",\n        \"bmp\": \"image_type\",\n        \"jpg\": \"image_type\",\n        \"ico\": \"image_type\"\n    },\n    \"text_editor\": {\n        \"tab\": {\n            \"insertSpaces\": true,\n            \"tabSize\": 4\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/script.html","title":"Writing a script","text":"<p>There are currently 3 types of scripts:</p> <ul> <li>Javascript scripts (*.js)</li> <li>non-visual QML scripts (*.qml)</li> <li>visual QML scripts (*.qml)</li> </ul> <p>If the first line is a comment, it will be used as the script description.</p> <p>If you need to know more about QML, follow this link: https://doc.qt.io/qt-6/qmlapplications.html</p>"},{"location":"getting-started/script.html#javascript-script","title":"Javascript script","text":"<p>Javascript scripts must contain a main function, the entry point for the script:</p> <pre><code>// Script description\nfunction main {\n    message.log(\"Hello World!\")\n}\n</code></pre>"},{"location":"getting-started/script.html#non-visual-qml-scripts","title":"Non-visual QML scripts","text":"<p>QML scripts are written using the <code>Script</code> item.</p> <pre><code>// Script description\nimport Script\n\nScript {\n    function init() {\n        // called at started\n        message.log(\"Hello World!\")\n    }\n    // ...\n}\n</code></pre> <p>The <code>init()</code> function in the root item (visual or not) will automatically be called at startup.</p>"},{"location":"getting-started/script.html#visual-qml-scripts","title":"Visual QML scripts","text":"<p>To create a visual script, you can use the <code>ScriptDialog</code> item. Such a script requires a second ui file, with the same name and in the same folder as the qml file.</p> <p>For example, here is a small ui file named <code>my-script.ui</code> </p> <p>The script using this ui file will be called <code>my-script.qml</code>: <pre><code>// Script description\nimport Script\n\nScriptDialog {\n    function init() {\n        // called at started\n        data.lineEdit = \"Hello World!\"\n    }\n    onAccepted: {\n        message.log(data.lineEdit)\n        close()\n    }\n}\n</code></pre></p> <p>The <code>QLineEdit</code> (named <code>lineEdit</code>) in the ui file is accessed both in reading and writing via <code>data.lineEdit</code>.</p>"},{"location":"getting-started/script.html#supported-widgets","title":"Supported widgets","text":"<p>Here is the list of supported widgets for your dialogs, and how to access them from the QML script.</p> Widget API used <code>QDialogButtonBox</code> Click notification via the <code>onAccepted</code> and <code>onRejected</code> signal handlers <code>QPushButton</code> Click notification via the <code>onClikced(name)</code> signal handler, with name being the objectName of the button <code>QToolButton</code> Click notification via the <code>onClikced(name)</code> signal handler, with name being the objectName of the button <code>QLineEdit</code> Text via <code>data.objectName</code> <code>QCheckBox</code> Check value via <code>data.objectName</code> <code>QRadioButton</code> Check value via <code>data.objectName</code> <code>QSpinBox</code> Value (int) via <code>data.objectName</code> <code>QDoubleSpinBox</code> Value (double) via <code>data.objectName</code> <code>QComboBox</code> Text via <code>data.objectName</code>, the list of values is available via <code>data.objectNameModel</code> <p>A note about <code>QComboBox</code>: if the combo box is editable, it will use the list of values as input data for completion.</p>"},{"location":"getting-started/script.html#alternative-using-qtquick","title":"Alternative: using QtQuick","text":"<p>You can also use directly QtQuick and QtQcuick.Controls if you want, for example a script with a button printing \"Hello World!\" in the log:</p> <pre><code>// Script description\nimport QtQuick\nimport QtQuick.Controls\nimport QtQuick.Layouts\nimport Script\n\nApplicationWindow {\n    width: 300\n    height: 300\n    ColumnLayout {\n        anchors.fill: parent\n        Button {\n            Layout.fillWidth: true\n            text: \"Log\"\n            onClicked: message.log(\"Hello World!\")\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/treesitter.html","title":"Syntax tree queries using Tree-sitter","text":"<p>Knut uses Tree-sitter to build a syntax tree of your files and query data from it.</p> <p>From the Tree-sitter website:</p> <p>Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited.</p> <p>Tree-sitter aims to be:</p> <ul> <li>General enough to parse any programming language</li> <li>Fast enough to parse on every keystroke in a text editor</li> <li>Robust enough to provide useful results even in the presence of syntax errors</li> <li>Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application</li> </ul>"},{"location":"getting-started/treesitter.html#tree-sitter-in-knut","title":"Tree-sitter in Knut","text":"<p>Current support in user scripts is limited to:</p> <ul> <li>Inspecting the concrete syntax tree generated by Tree-sitter using the \"Tree-sitter Inspector\".</li> <li>Running Tree-sitter Queries</li> <li>Only available on C/C++ files</li> </ul> <p>However, this already allows for some very easy &amp; powerful analysis and modification of C++ source files.</p> <p>Knut also returns Tree-sitter query results in some of its high-level methods. Usually in the form of the QueryMatch class.</p> <p>See the QueryMatch documentation for more details of how to use this class.</p> <p>Compared to the language server, Tree-sitter is a lot more resistant to errors and works well, even if the current code would not compile. For this reason many Knut functions internally rely on Tree-sitter instead of the language server. This may result in false-positives though, as Tree-sitter only works on a syntax level and doesn't understand the high-level structures of the code. Tree-sitter will especially struggle if symbols are overloaded, as all references may be picked up.</p>"},{"location":"getting-started/treesitter.html#writing-tree-sitter-queries","title":"Writing Tree-sitter queries","text":"<p>Tree-sitter queries are a powerful tool, as the syntax tree parsed by Tree-sitter makes it easy to find functions, class definitions, etc. For the exhaustive specification of the query syntax, see the Tree-sitter website.</p> <p>Knut supports prototyping queries with the <code>Tree-sitter Inspector</code>, which can be accessed in the Knut GUI under the <code>C++</code> menu.</p> <p>The Tree-sitter Inspector allows you to inspect the syntax tree of the current file. Note that this does not include anonymous nodes (e.g. any symbols like -&gt; * + - / ). These are still in the syntax tree and can be queried. For details, see the query documentation.</p> <p>As the syntax tree can become large very quickly, the Inspector provides a bi-directional mapping to the edited file.</p> <ol> <li>Clicking any node in the inspector will select the corresponding text in the document</li> <li>Any node that includes the cursor position is highlighted in green.</li> </ol> <p>Additionally, you can test your queries in the bottom-left input field. The Tree-sitter Inspector will notify you of errors in your query and display the number of patterns, matches and captures as you type. Any captured nodes will also display their captures in the syntax tree view.</p> <p>After prototyping a query, it can easily be included in a script by calling <code>query</code> on any LSP capable document (e.g. C/C++). Together with Javascripts Destructuring Assignment and Template Literals this makes queries very ergonomic to use in your own scripts.</p> <p>Example: <pre><code>let className = /*...*/;\n\n//  Destructuring Assignment with [ ] can be used if only one result is expected.\nlet [constructor] = cppFile.query(`\n    (function_definition\n        declarator: (function_declarator\n            declarator: (qualified_identifier\n                scope: (_) @scope\n                (identifier) @name)\n                (#eq? \"${className}\" @scope @name))\n        body: (compound_statement) @body)\n`);\n//                     ^^^^^^^^^^^^\n// Note how className was entered directly into the query using the ${...} syntax.\n\n// The result will be an empty list if nothing was found.\n// When using destructuring assignment, constructor will then be undefined.\nif (!constructor) {\n    Message.warning(`Cannot find constructor for class ${className}`);\n    return;\n}\n\n// Get the text of a capture\nlet old_body = constructor.get(\"body\").text;\n\n// Modify a capture\nconstructor.get(\"body\").replace(\"body\").replace(`{\n    std::log &lt;&lt; \"${className} Constructor\" &lt;&lt; std::endl;\n}`);\n\n// Or remove it outright\nconstructor.get(\"body\").remove()\n</code></pre></p>"},{"location":"getting-started/treesitter.html#predicates","title":"Predicates","text":"<p>Tree-sitter queries can be extended by the embedding application (in this case Knut) using predicates.</p> <p>The predicates provided by Knut are divided into two categories:</p> <ol> <li>Commands - Predicates ending with an exclamation mark (<code>!</code>)<ul> <li>These predicates may modify a QueryMatch, but not discard it</li> <li>Commands are run before the filters are checked</li> </ul> </li> <li>Filters - Predicates ending with a question mark (<code>?</code>)<ul> <li>These predicates can discard, but not modify a QueryMatch</li> <li>A filter discards a QueryMatch if its check fails</li> <li>Filters are checked after the commands run</li> </ul> </li> </ol> <p>Knut currently provides implementations for these predicates:</p>"},{"location":"getting-started/treesitter.html#exclude-capture-exclusion","title":"<code>(exclude! [capture]+ [exclusion]+)</code>","text":"<p>Exclude node types listed in <code>exclusion</code> from the given <code>capture</code>s.</p> <p>This is especially useful to remove any unwanted <code>(comment)</code> nodes. Especially when transforming function calls, this is helpful, as the order of arguments is often relevant there and inline comments should likely not be treated as positional arguments.</p> <p>Example: <pre><code>(call_expression\n    function: (identifier) @name (#eq? @name myFunction)\n    arguments: (argument_list\n        [(_) @argument \",\"]*)\n    (#exclude! @argument comment))\n</code></pre> This query would return a QueryMatch with only 2 captures for \"argument\" on the following call: <pre><code>myFunction(1, /*documentation for the second parameter*/ 2);\n</code></pre></p> <p>Where the first <code>@argument</code> capture would be <code>\"1\"</code> and the second <code>\"2\"</code>.</p> <p>Without the <code>(#exclude!)</code> predicate, 3 nodes would have been captured, with the comment as the second capture.</p>"},{"location":"getting-started/treesitter.html#eq-args","title":"<code>(#eq? [args]+)</code>","text":"<p>Check if all arguments are exactly string-equal</p> <p>Example usage to find the constructor of <code>MyClass</code> <pre><code>(function_definition\n    declarator: (function_declarator\n        declarator: (qualified_identifier\n            scope: (_) @scope\n            (identifier) @name)\n            (#eq? \"MyClass\" @scope @name))\n    body: (compound_statement) @body)\n</code></pre> Would find the constructor of the class <code>MyClass</code>.</p>"},{"location":"getting-started/treesitter.html#like-args","title":"<code>(like? [args]+)</code>","text":"<p>Check if all arguments are \"alike\".</p> <p>In this case \"alike\" means the arguments are all string-equal, after all white-space is removed.</p> <p>This is very useful when comparing strings that might span multiple lines or may be indented/formatted differently depending on preference. E.g. <code>const QString&amp;</code> could also be formatted as <code>const QString &amp;</code>. The <code>like?</code> predicate would match both of these variations.</p> <p>In general, prefer <code>like?</code> over <code>eq?</code> when matching anything other than a single identifier.</p>"},{"location":"getting-started/treesitter.html#eq_except-pattern-capture-exclusion","title":"<code>(eq_except? [pattern] [capture] [exclusion]+)</code>","text":"<p>Check if the pattern and the capture are string-equal, excluding any (sub-)nodes that have a type listed in <code>exclusion</code>.</p> <p>This is similar to the <code>(#eq?)</code> operator. However, the captured nodes and their child nodes are filtered. Any (child) node listed in <code>exclusion</code> is removed from the string before comparing for string-equality.</p> <p>This is useful to remove the <code>identifier</code> from a parameter_declaration, that may have arbitrarily many pointer indirections.</p> <p>E.g.: To check that the type of a parameter is <code>const std::string &amp;</code>, you can simply exclude the identifier: <pre><code>(function_definition\n    declarator: (function_declarator\n        parameters: (parameter_list\n            (parameter_declaration) @param\n            (#eq_except? \"const std::string &amp;\" @param \"identifier\"))))\n</code></pre></p>"},{"location":"getting-started/treesitter.html#like_except-pattern-capture-exclusion","title":"<code>(like_except? [pattern] [capture] [exclusion]+)</code>","text":"<p>Check if the pattern and capture are \"alike\", excluding any (sub-)nodes that have a type listed in <code>exclusion</code>.</p> <p>See: <code>(#eq_except?)</code> and <code>(#like?)</code>.</p>"},{"location":"getting-started/treesitter.html#match-regex-args","title":"<code>(#match? [regex] [args]+)</code>","text":"<p>Check if the given <code>args</code> match the given <code>regex</code></p> <p>Example usage to find all member function definitions of <code>MyClass</code> <pre><code>(function_definition\n    declarator: (function_declarator\n        declarator: (_) @name\n            (#match? \"MyClass::\" @name))\n    body: (compound_statement) @body)\n</code></pre></p>"},{"location":"getting-started/treesitter.html#not_is-capture-node_type","title":"<code>(#not_is? [capture]+ [node_type]+)</code>","text":"<p>Check that none of the captures are of any of the given node types.</p> <p>This is especially useful when using the wildcard operators <code>(_)</code> and <code>_</code>. These match any (named) node type. Combined with this predicate these can match any node type but the given types.</p> <p>Example usage to find all member functions that return any type other than a primitive type: <pre><code>(function_definition\n    type: (_) @type\n    (#not_is? @type primitive_type)) @function\n</code></pre></p>"},{"location":"getting-started/treesitter.html#in_message_map-capture","title":"<code>(#in_message_map? [capture]+)</code>","text":"<p>Check if the given capture is within a MFC message map.</p> <p>Example usage to find all elements of the message map: <pre><code>(\n(expression_statement) @expr\n(#in_message_map? @expr)\n)\n</code></pre> Note that for most operations, using <code>CppDocument::mfcExtractMessageMap</code> is probably easier.</p>"}]}